interactive_expr: C_None WILD
##
## Ends in an error in state: 179.
##
## call_expr_level -> call_expr_level_in . option(type_annotation_simple) [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## call_expr_level_in
##

Ill-formed 'None' constructor. 
At this point one of the following is expected:
  a type annotation; or
  a semicolon ';'.

interactive_expr: C_Some VBAR
##
## Ends in an error in state: 131.
##
## constr_expr -> C_Some . core_expr [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## C_Some
##

Ill-formed 'Some' constructor.
At this point an expression is expected.

interactive_expr: Constr DOT Ident WILD
##
## Ends in an error in state: 115.
##
## module_fun -> Ident . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## projection -> Constr DOT Ident . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT Ident
##

Ill-formed expression.
At this point one of the following is expected:
  a selection; or
  a semicolon ';'. 

interactive_expr: Constr DOT WILD
##
## Ends in an error in state: 113.
##
## module_field -> Constr DOT . module_fun [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## projection -> Constr DOT . Ident selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

Ill-formed expression.
At this point an identifier is expected.

interactive_expr: Constr Switch
##
## Ends in an error in state: 112.
##
## constr_expr -> Constr . core_expr [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## constr_expr -> Constr . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## module_field -> Constr . DOT module_fun [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## projection -> Constr . DOT Ident selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

Ill-formed expression.
At this point one of the following is expected:
  an expression; or 
  a dot '.',
    followed by identifier; or 
  a semicolon ';'.

interactive_expr: Ident DOT Ident WILD
##
## Ends in an error in state: 107.
##
## selection -> DOT Ident . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## selection -> DOT Ident . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## DOT Ident
##

Ill-formed selection.
At this point one of the following is expected:
  a selection; or
  a semicolon ';'.

interactive_expr: Ident DOT WILD
##
## Ends in an error in state: 106.
##
## selection -> DOT . Ident selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## selection -> DOT . Ident [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## DOT
##

Ill-formed selection.
At this point an identifier is expected.

interactive_expr: Ident LBRACKET Int RBRACKET WILD
##
## Ends in an error in state: 105.
##
## selection -> LBRACKET Int RBRACKET . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## selection -> LBRACKET Int RBRACKET . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET Int RBRACKET
##

Ill-formed selection.
At this point one of the following is expected:
  a selection; or
  a semicolon ';'.

interactive_expr: Ident LBRACKET Int WILD
##
## Ends in an error in state: 104.
##
## selection -> LBRACKET Int . RBRACKET selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## selection -> LBRACKET Int . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET Int
##

Ill-formed selection.
At this point a closing bracket ']' is expected.

interactive_expr: Ident LBRACKET WILD
##
## Ends in an error in state: 103.
##
## selection -> LBRACKET . Int RBRACKET selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## selection -> LBRACKET . Int RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed selection.
At this point an int is expected.

interactive_expr: Ident WILD
##
## Ends in an error in state: 102.
##
## common_expr -> Ident . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## projection -> Ident . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed expression.
At this point one of the following is expected:
  a selection; or
  a semicolon ';'.

interactive_expr: If LBRACE VBAR
##
## Ends in an error in state: 233.
##
## parenthesized_expr -> LBRACE . expr RBRACE [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACE
##
interactive_expr: If LPAR VBAR
##
## Ends in an error in state: 101.
##
## parenthesized_expr -> LPAR . expr RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR
##
interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE VBAR
##
## Ends in an error in state: 351.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE . closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE
##
interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD RBRACE Else LBRACE VBAR
##
## Ends in an error in state: 411.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE . closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE
##

Ill-formed 'if' expression.
At this point an expression is expected.

interactive_expr: If LBRACE WILD VBAR
##
## Ends in an error in state: 234.
##
## parenthesized_expr -> LBRACE expr . RBRACE [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
##
interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD RBRACE Else LBRACE WILD SEMI PLUS
##
## Ends in an error in state: 413.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) . RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI)
##
interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD RBRACE Else LBRACE WILD VBAR
##
## Ends in an error in state: 412.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if . option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 416, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr 
## In state 415, spurious reduction of production closed_if -> base_if_then_else__open(closed_if) 
##

Ill-formed 'if' expression. 
At this point a closing brace '}' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD RBRACE Else WILD
##
## Ends in an error in state: 410.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

Ill-formed 'if' expression.
At this point an opening brace '{' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD RBRACE WILD
##
## Ends in an error in state: 409.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . Else LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
##

Ill-formed 'if' expression.
At this point 'else' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD SEMI PLUS
##
## Ends in an error in state: 408.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

Ill-formed 'if' expression.
At this point one of the following is expected:
  another expression; or
  a closing brace '}'.

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR LBRACE WILD VBAR
##
## Ends in an error in state: 407.
##
## if_then_else(closed_if) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 416, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr 
## In state 415, spurious reduction of production closed_if -> base_if_then_else__open(closed_if) 
##

Ill-formed 'if' expression.
At this point one of the following is expected:
  another expression; or
  a closing brace '}'.

interactive_expr: If LPAR WILD RPAR LBRACE If LPAR Bytes RPAR WILD
##
## Ends in an error in state: 350.
##
## if_then_else(closed_if) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

Ill-formed 'if' expression.
At this point a closing brace '{' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE If WILD
##
## Ends in an error in state: 349.
##
## if_then_else(closed_if) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE closed_if option(SEMI) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If
##

Ill-formed 'if' expression.
At this point an expression between parentheses is expected. 

interactive_expr: If LPAR WILD RPAR LBRACE Switch VBAR
##
## Ends in an error in state: 238.
##
## switch_expr(base_if_then_else) -> Switch . switch_expr_ LBRACE cases(base_if_then_else) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch
##

Ill-formed 'switch' expression.
At this point an expression is expected.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR VBAR
##
## Ends in an error in state: 276.
##
## case_clause(base_if_then_else) -> VBAR . pattern ARROW base_if_then_else option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR
##

Ill-formed 'switch' case.
At this point a pattern is expected.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW Bytes SEMI WILD
##
## Ends in an error in state: 434.
##
## nseq(case_clause(base_if_then_else)) -> case_clause(base_if_then_else) . seq(case_clause(base_if_then_else)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_if_then_else)
##
interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW Bytes VBAR Bytes ARROW Bytes SEMI WILD
##
## Ends in an error in state: 436.
##
## seq(case_clause(base_if_then_else)) -> case_clause(base_if_then_else) . seq(case_clause(base_if_then_else)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_if_then_else)
##

Ill-formed 'switch' expression.
At this point one of the following is expected:
  a switch case; or
  a closing brace '}'.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE VBAR
##
## Ends in an error in state: 348.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE . closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE
##
interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD RBRACE Else LBRACE VBAR
##
## Ends in an error in state: 421.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE . base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE
##

Ill-formed 'if' expression.
At this point an expression is expected.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD RBRACE Else LBRACE WILD SEMI PLUS
##
## Ends in an error in state: 425.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) . RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI)
##

Ill-formed 'if' expression.
At this point a closing brace '}' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD RBRACE Else LBRACE WILD VBAR
##
## Ends in an error in state: 424.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else . option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 427, spurious reduction of production base_if_then_else__open(base_if_then_else) -> base_expr 
## In state 423, spurious reduction of production base_if_then_else -> base_if_then_else__open(base_if_then_else) 
##

Ill-formed 'if' expression.
At this point a closing brace '}' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD RBRACE Else WILD
##
## Ends in an error in state: 420.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

Ill-formed 'if' expression.
At this point an opening '{' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD RBRACE WILD
##
## Ends in an error in state: 419.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
##

Ill-formed 'if' expression.
At this point 'else' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD SEMI PLUS
##
## Ends in an error in state: 418.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

Ill-formed 'if' expression.
At this point a closing brace '}' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR LBRACE WILD VBAR
##
## Ends in an error in state: 417.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 416, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr 
## In state 415, spurious reduction of production closed_if -> base_if_then_else__open(closed_if) 
##

Ill-formed 'if' expression.
At this point a closing brace '}' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If LPAR Bytes RPAR WILD
##
## Ends in an error in state: 347.
##
## if_then_else(base_if_then_else) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

Ill-formed 'if' expression.
At this point an opening brace '{' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW If WILD
##
## Ends in an error in state: 346.
##
## if_then_else(base_if_then_else) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE base_if_then_else option(SEMI) RBRACE [ VBAR SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## If
##

Ill-formed 'if' expression.
Expected a parenthesized test as part of the if expression.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW VBAR
##
## Ends in an error in state: 345.
##
## case_clause(base_if_then_else) -> VBAR pattern ARROW . base_if_then_else option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern ARROW
##

Ill-formed switch case.
At this point an expression is expected.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD ARROW WILD Type
##
## Ends in an error in state: 428.
##
## case_clause(base_if_then_else) -> VBAR pattern ARROW base_if_then_else . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern ARROW base_if_then_else
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 427, spurious reduction of production base_if_then_else__open(base_if_then_else) -> base_expr 
## In state 423, spurious reduction of production base_if_then_else -> base_if_then_else__open(base_if_then_else) 
##

Ill-formed 'switch' expression.
At this point one of the following is expected:
  a switch case; or 
  a closing brace '}'.
  
interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE VBAR WILD COMMA Bytes RPAR
##
## Ends in an error in state: 344.
##
## case_clause(base_if_then_else) -> VBAR pattern . ARROW base_if_then_else option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 331, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern 
## In state 333, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA) 
## In state 342, spurious reduction of production pattern -> tuple(sub_pattern) 
##

Ill-formed 'switch' case.
At this point an arrow '=>' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD LBRACE WILD
##
## Ends in an error in state: 275.
##
## switch_expr(base_if_then_else) -> Switch switch_expr_ LBRACE . cases(base_if_then_else) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch switch_expr_ LBRACE
##

Ill-formed 'switch' expression.
At this point a switch case is expected. 

interactive_expr: If LPAR WILD RPAR LBRACE Switch WILD WILD
##
## Ends in an error in state: 274.
##
## switch_expr(base_if_then_else) -> Switch switch_expr_ . LBRACE cases(base_if_then_else) RBRACE [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Switch switch_expr_
##

Ill-formed 'switch' expression.
At this point an opening brace '{' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE VBAR
##
## Ends in an error in state: 237.
##
## if_then(expr_with_let_expr) -> If parenthesized_expr LBRACE . closed_if option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE . closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE
##

Ill-formed 'if' expression.
At this point an opening brace '{' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE WILD RBRACE Else LBRACE VBAR
##
## Ends in an error in state: 446.
##
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE . expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE
##

Ill-formed 'if' expression.
At this point an opening brace '{' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE WILD RBRACE Else LBRACE WILD SEMI PLUS
##
## Ends in an error in state: 448.
##
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr option(SEMI) . RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr option(SEMI)
##

Ill-formed 'if' expression.
At this point a closing brace '}' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE WILD RBRACE Else LBRACE WILD VBAR
##
## Ends in an error in state: 447.
##
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr . option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
## In state 401, spurious reduction of production expr_with_let_expr -> expr 
##

Ill-formed 'if' expression.
At this point a closing brace '}' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE WILD RBRACE Else WILD
##
## Ends in an error in state: 445.
##
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else . LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else
##

Ill-formed 'if' expression.
At this point an opening brace '{' is expected.

interactive_expr: If LPAR WILD RPAR LBRACE WILD RBRACE WILD
##
## Ends in an error in state: 444.
##
## if_then(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE . Else LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI) RBRACE
##

Ill-formed 'if' expression.
At this point one of the following is expected:
  an 'else' block; or
  a closing brace '}'.

interactive_expr: If LPAR WILD RPAR LBRACE WILD SEMI PLUS
##
## Ends in an error in state: 443.
##
## if_then(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if option(SEMI) . RBRACE Else LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if option(SEMI)
##

Ill-formed 'if' expression.
At this point a closing brace '}' is expected, 
followed with an optional 'else' block.

interactive_expr: If LPAR WILD RPAR LBRACE WILD VBAR
##
## Ends in an error in state: 442.
##
## if_then(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## if_then_else(expr_with_let_expr) -> If parenthesized_expr LBRACE closed_if . option(SEMI) RBRACE Else LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr LBRACE closed_if
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 416, spurious reduction of production base_if_then_else__open(closed_if) -> base_expr 
## In state 415, spurious reduction of production closed_if -> base_if_then_else__open(closed_if) 
##

Ill-formed 'if' expression.
At this point a closing brace '}' is expected, 
followed with an optional 'else' block.

interactive_expr: If LPAR WILD RPAR WILD
##
## Ends in an error in state: 236.
##
## if_then(expr_with_let_expr) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## if_then_else(expr_with_let_expr) -> If parenthesized_expr . LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If parenthesized_expr
##

Ill-formed 'if' expression.
At this point an opening brace '{' is expected.

interactive_expr: If LPAR WILD VBAR
##
## Ends in an error in state: 231.
##
## parenthesized_expr -> LPAR expr . RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
##

Ill-formed 'if' expression.
At this point a closing parenthesis ')' is expected.

interactive_expr: If WILD
##
## Ends in an error in state: 100.
##
## if_then(expr_with_let_expr) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## if_then_else(expr_with_let_expr) -> If . parenthesized_expr LBRACE closed_if option(SEMI) RBRACE Else LBRACE expr_with_let_expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## If
##

Ill-formed 'if' expression.
At this an opening parenthesis '(' is expected.

interactive_expr: LBRACE ELLIPSIS Constr DOT Ident WILD
##
## Ends in an error in state: 256.
##
## projection -> Constr DOT Ident . selection [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Constr DOT Ident
##

Ill-formed functional record update.
At this point a selection '[<int>]' is optional, 
  followed by a required comma ','.

interactive_expr: LBRACE ELLIPSIS Constr DOT WILD
##
## Ends in an error in state: 255.
##
## projection -> Constr DOT . Ident selection [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

Ill-formed module path.
At this point an identifier is expected.

interactive_expr: LBRACE ELLIPSIS Constr WILD
##
## Ends in an error in state: 254.
##
## projection -> Constr . DOT Ident selection [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Constr
##

Ill-formed module path.
At this point a dot '.' is expected, 
  followed by an identifier.

interactive_expr: LBRACE ELLIPSIS Ident COLON
##
## Ends in an error in state: 258.
##
## update_record -> LBRACE ELLIPSIS path . COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 253, spurious reduction of production path -> Ident 
##

Ill-formed functional record update.
At this point a comma ',' is expected, 
  followed by record field assignment(s).

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes COMMA Ident COLON Bytes COMMA WILD
##
## Ends in an error in state: 272.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment COMMA . nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment COMMA . seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment COMMA
##

Ill-formed functional record update.
At this point a record field assignment is expected.

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes COMMA Ident COLON Bytes VBAR
##
## Ends in an error in state: 271.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . COMMA nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment . COMMA seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
## In state 264, spurious reduction of production field_path_assignment -> path COLON expr 
##

Ill-formed functional record update.
At this point one of the following is expected:
  a comma ',', 
    followed by a record field assignment; or 
  a closing brace '}'.

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes COMMA WILD
##
## Ends in an error in state: 268.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment COMMA . nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment COMMA . seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment COMMA
##

Ill-formed functional record update.
At this point a record field assignment is expected.

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes VBAR
##
## Ends in an error in state: 267.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . COMMA nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment . COMMA seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
## In state 264, spurious reduction of production field_path_assignment -> path COLON expr 
##

Ill-formed functional record update.
At this point one of the following is expected:
  a comma ',', 
    followed by a record field assignment; or 
  a closing brace '}'.

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON VBAR
##
## Ends in an error in state: 263.
##
## field_path_assignment -> path COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## path COLON
##

Ill-formed functional record update.
At this point an expression is expected.

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COMMA
##
## Ends in an error in state: 262.
##
## field_path_assignment -> path . COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 253, spurious reduction of production path -> Ident 
##

Ill-formed record field assignment.
At this point a colon ':' is expected, 
  followed by an expression.

interactive_expr: LBRACE ELLIPSIS Ident COMMA WILD
##
## Ends in an error in state: 259.
##
## update_record -> LBRACE ELLIPSIS path COMMA . sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS path COMMA
##

Ill-formed functional record update.
At this point a record field assignment is expected.

interactive_expr: LBRACE ELLIPSIS Ident WILD
##
## Ends in an error in state: 253.
##
## path -> Ident . [ COMMA COLON ]
## projection -> Ident . selection [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed functional record update.
At this point one of the following is expected:
  a selection '[<int>]'; or
  a comma ',', 
    followed by record field assignment(s).

interactive_expr: LBRACE ELLIPSIS WILD
##
## Ends in an error in state: 252.
##
## update_record -> LBRACE ELLIPSIS . path COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS
##

Ill-formed functional record update.
At this point a module path was expected.

interactive_expr: LBRACE Ident COLON Bytes VBAR
##
## Ends in an error in state: 478.
##
## record -> LBRACE field_assignment . option(more_field_assignments) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE field_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
## In state 464, spurious reduction of production field_assignment -> Ident COLON expr 
##

Ill-formed record expression.
At this point one of the following is expected:
  a comma ',', 
    followed by a record field assignment; or
  a closing brace '}'.

interactive_expr: LBRACE Ident COLON VBAR
##
## Ends in an error in state: 463.
##
## field_assignment -> Ident COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

Ill-formed record field assignment.
At this point an expression is expected.

interactive_expr: LBRACE Ident COMMA Ident COLON Bytes VBAR
##
## Ends in an error in state: 468.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . [ RBRACE ]
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . COMMA nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning . COMMA seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
## In state 464, spurious reduction of production field_assignment -> Ident COLON expr 
## In state 475, spurious reduction of production field_assignment_punning -> field_assignment 
##

Ill-formed record expression.
At this point one of the following is expected:
  a comma ',', 
    followed by a record field assignment; or
  a closing brace '}'.

interactive_expr: LBRACE Ident COMMA Ident COMMA Ident COLON Bytes VBAR
##
## Ends in an error in state: 472.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . [ RBRACE ]
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . COMMA nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning . COMMA seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
## In state 464, spurious reduction of production field_assignment -> Ident COLON expr 
## In state 475, spurious reduction of production field_assignment_punning -> field_assignment 
##

Ill-formed record expression.
At this point one of the following is expected:
  a comma ',', 
    followed by a record field assignment; or
  a closing brace '}'.

interactive_expr: LBRACE Ident COMMA Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 473.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning COMMA . nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning COMMA . seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning COMMA
##

Ill-formed record expression.
At this point a record field assignment is expected.

interactive_expr: LBRACE Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 469.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning COMMA . nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning COMMA . seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning COMMA
##

Ill-formed record expression.
At this point a record field assignment is expected.

interactive_expr: LBRACE Ident COMMA Ident WILD
##
## Ends in an error in state: 462.
##
## field_assignment -> Ident . COLON expr [ RBRACE COMMA ]
## field_assignment_punning -> Ident . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed record expression.
At this point one of the following is expected:
  a colon ':', 
    followed by an expression; or
  a comma ',', 
    followed by a record field assignment; or
  a closing brace '}'.

interactive_expr: LBRACE Ident COMMA WILD
##
## Ends in an error in state: 461.
##
## more_field_assignments -> COMMA . sep_or_term_list(field_assignment_punning,COMMA) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## COMMA
##

Ill-formed record expression.
At this point a record field assignment is expected.

interactive_expr: LBRACE Ident WILD
##
## Ends in an error in state: 460.
##
## common_expr -> Ident . [ TIMES SLASH SEMI RBRACE PLUS Or NE Mod MINUS LT LPAR LE GT GE EQEQ COLON CAT BOOL_OR BOOL_AND ARROW ]
## field_assignment -> Ident . COLON expr [ RBRACE COMMA ]
## projection -> Ident . selection [ TIMES SLASH SEMI RBRACE PLUS Or NE Mod MINUS LT LPAR LE GT GE EQEQ COLON CAT BOOL_OR BOOL_AND ARROW ]
## record -> LBRACE Ident . more_field_assignments RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE Ident
##

Ill-formed expression.
If this is a sequence, 
  then at this point one of the following is expected:
    a closing brace '}'; or
    a semicolon ';' and an expression.
If this is a record expression, 
  then at this point one of the following is expected:
    a colon ':', 
      followed by an expresion; or 
    a comma ',', 
      followed by a record field assignment.

interactive_expr: LBRACE VBAR
##
## Ends in an error in state: 97.
##
## record -> LBRACE . field_assignment option(more_field_assignments) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## record -> LBRACE . Ident more_field_assignments RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## sequence -> LBRACE . exprs RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## update_record -> LBRACE . ELLIPSIS path COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed expression. 
If this is a sequence, 
  then after the opening brace '{' an expression is expected.
If this is a record expression,
  then at this point an identifier is expected.
If this is a functional record update,
  then at this point an ellipsis '...' is expected.

interactive_expr: LBRACE WILD SEMI VBAR
##
## Ends in an error in state: 485.
##
## exprs -> expr_with_let_expr SEMI . exprs [ RBRACE ]
## option(SEMI) -> SEMI . [ RBRACE ]
##
## The known suffix of the stack is as follows:
## expr_with_let_expr SEMI
##

Ill-formed sequence of expressions.
At this point an expression is expected.

interactive_expr: LBRACE WILD VBAR
##
## Ends in an error in state: 484.
##
## exprs -> expr_with_let_expr . option(SEMI) [ RBRACE ]
## exprs -> expr_with_let_expr . SEMI exprs [ RBRACE ]
##
## The known suffix of the stack is as follows:
## expr_with_let_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
## In state 401, spurious reduction of production expr_with_let_expr -> expr 
##

Ill-formed sequence of expressions. 
At this point one of the following is expected:
  a semicolon ';', 
    followed by an expression; or
  a closing brace '}'.

interactive_expr: LBRACKET PERCENT Constr VBAR
##
## Ends in an error in state: 95.
##
## code_insert -> LBRACKET PERCENT Constr . expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET PERCENT Constr
##

Ill-formed code insert.
At this point an expression is expected.

interactive_expr: LBRACKET PERCENT Constr WILD VBAR
##
## Ends in an error in state: 489.
##
## code_insert -> LBRACKET PERCENT Constr expr . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET PERCENT Constr expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
##

Ill-formed code insert.
At this point a closing bracket ']' is expected.

interactive_expr: LBRACKET PERCENT WILD
##
## Ends in an error in state: 94.
##
## code_insert -> LBRACKET PERCENT . Constr expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET PERCENT
##

Ill-formed code insert.
At this point a capitalized name is expected.

interactive_expr: LBRACKET VBAR
##
## Ends in an error in state: 93.
##
## code_insert -> LBRACKET . PERCENT Constr expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## list_or_spread -> LBRACKET . expr COMMA sep_or_term_list(expr,COMMA) RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## list_or_spread -> LBRACKET . expr COMMA ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## list_or_spread -> LBRACKET . option(expr) RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed expression.
If this is a code insert, 
  then a percentage '%' symbol is expected.
If this is spread syntax, 
  then an expression is expected.
If this is a list, then one of the following is expected:
  an expression; or
  a closing bracket ']'.

interactive_expr: LBRACKET WILD COMMA ELLIPSIS VBAR
##
## Ends in an error in state: 495.
##
## list_or_spread -> LBRACKET expr COMMA ELLIPSIS . expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA ELLIPSIS
##

Ill-formed spread syntax.
At this point an expression is expected.

interactive_expr: LBRACKET WILD COMMA ELLIPSIS WILD VBAR
##
## Ends in an error in state: 496.
##
## list_or_spread -> LBRACKET expr COMMA ELLIPSIS expr . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA ELLIPSIS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
##

Ill-formed spread syntax.
At this point a closing bracket ']' is expected.

interactive_expr: LBRACKET WILD COMMA VBAR
##
## Ends in an error in state: 494.
##
## list_or_spread -> LBRACKET expr COMMA . sep_or_term_list(expr,COMMA) RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## list_or_spread -> LBRACKET expr COMMA . ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA
##

Ill-formed expression.
If this is a list expression, 
  then at this point an expression is expected.
If this is spread syntax,
  then at this point an ellipsis '...' is expected.

interactive_expr: LBRACKET WILD COMMA WILD COMMA WILD VBAR
##
## Ends in an error in state: 248.
##
## nsepseq(expr,COMMA) -> expr . [ RBRACKET ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RBRACKET ]
## seq(__anonymous_0(expr,COMMA)) -> expr . COMMA seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
##

Ill-formed list expression.
At this point one of the following is expected:
  a comma ',', 
    followed by an expression; or
  a closing bracket ']'.

interactive_expr: LBRACKET WILD COMMA WILD VBAR
##
## Ends in an error in state: 245.
##
## nsepseq(expr,COMMA) -> expr . [ RBRACKET ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(expr,COMMA)) -> expr . COMMA seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
##

Ill-formed list expression.
At this point one of the following is expected:
  a comma ',', 
    followed by an expression; or
  a closing bracket ']'.

interactive_expr: LBRACKET WILD VBAR
##
## Ends in an error in state: 493.
##
## list_or_spread -> LBRACKET expr . COMMA sep_or_term_list(expr,COMMA) RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## list_or_spread -> LBRACKET expr . COMMA ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## option(expr) -> expr . [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
##

Ill-formed expression.
If this is a list expression, 
  then at this point one of the following is expected:
    a comma ',', 
      followed by an expression; or
    a closing bracket ']'.
If this is spread syntax, 
  then at this point an ellipsis is expected,
    followed by an expression.
  
interactive_expr: LPAR VBAR
##
## Ends in an error in state: 98.
##
## par(expr) -> LPAR . expr RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## par(tuple(disj_expr_level)) -> LPAR . tuple(disj_expr_level) RPAR [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA COLON BOOL_OR Attr ARROW ]
## unit -> LPAR . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed expression.
If this is a tuple or an expression wrapped by parentheses, 
  then at this point an expression is expected.
If this is a unit,
  then at this point a closing parenthesis ')' is expected.
If this is a function expression,
  then at this point an identifier is expected.

interactive_expr: LPAR WILD COMMA Bytes RPAR COLON Ident TIMES
##
## Ends in an error in state: 171.
##
## base_expr -> disj_expr_level . [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA BOOL_OR Attr ARROW ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA BOOL_OR Attr ARROW ]
## fun_expr(expr) -> disj_expr_level . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 139, spurious reduction of production option(type_expr_simple_args) -> 
## In state 148, spurious reduction of production type_expr_simple -> Ident option(type_expr_simple_args) 
## In state 155, spurious reduction of production type_annotation_simple -> COLON type_expr_simple 
## In state 156, spurious reduction of production option(type_annotation_simple) -> type_annotation_simple 
## In state 157, spurious reduction of production disj_expr_level -> par(tuple(disj_expr_level)) option(type_annotation_simple) 
##

Ill-formed expression.
If this is a function expression,
  then at this point an arrow '=>' is expected.
If this is a tuple,
  then at this point a semicolon ';' is expected.

interactive_expr: LPAR WILD COMMA Bytes RPAR WILD
##
## Ends in an error in state: 136.
##
## disj_expr_level -> par(tuple(disj_expr_level)) . option(type_annotation_simple) [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA BOOL_OR Attr ARROW ]
##
## The known suffix of the stack is as follows:
## par(tuple(disj_expr_level))
##

Ill-formed expression.
If this is a function expression,
  then at this point an arrow '=>' is expected.
If this is a tuple, 
  then at this point a semicolon ';' is expected.

interactive_expr: LPAR WILD COMMA VBAR
##
## Ends in an error in state: 455.
##
## tuple(disj_expr_level) -> disj_expr_level COMMA . nsepseq(disj_expr_level,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level COMMA
##

Ill-formed expression.
If this is a tuple, 
  then at this point an expression is expected.
If this is a function expression,
  then at this point an identifier is expected.

interactive_expr: LPAR WILD COMMA WILD COMMA VBAR
##
## Ends in an error in state: 458.
##
## nsepseq(disj_expr_level,COMMA) -> disj_expr_level COMMA . nsepseq(disj_expr_level,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level COMMA
##

Ill-formed expression.
If this is a tuple, 
  then at this point an expression is expected.
If this is a function expression,
  then at this point an identifier is expected.

interactive_expr: LPAR WILD COMMA WILD VBAR
##
## Ends in an error in state: 457.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ RPAR Or COMMA BOOL_OR ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ RPAR Or COMMA BOOL_OR ]
## nsepseq(disj_expr_level,COMMA) -> disj_expr_level . [ RPAR ]
## nsepseq(disj_expr_level,COMMA) -> disj_expr_level . COMMA nsepseq(disj_expr_level,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
##

Ill-formed expression.
If this is a boolean comparison, 
  then at this point a boolean operator is expected.
If this is an expression wrapped between parentheses,
  then at this point a closing parenthesis ')' is expected.
If this is a tuple or function expression,
  then at this point a comma ',' is expected.

interactive_expr: LPAR WILD VBAR
##
## Ends in an error in state: 454.
##
## base_expr -> disj_expr_level . [ RPAR ]
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ RPAR Or COMMA BOOL_OR ARROW ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ RPAR Or COMMA BOOL_OR ARROW ]
## fun_expr(expr) -> disj_expr_level . ARROW expr [ RPAR ]
## tuple(disj_expr_level) -> disj_expr_level . COMMA nsepseq(disj_expr_level,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
##

Ill-formed expression.
If this is a boolean comparison, 
  then at this point a boolean operator is expected.
If this is an expression wrapped between parentheses,
  then at this point a closing parenthesis ')' is expected.
If this is a tuple or function expression,
  then at this point a comma ',' is expected.

interactive_expr: Let Rec Verbatim
##
## Ends in an error in state: 355.
##
## let_expr(expr_with_let_expr) -> seq(Attr) Let Rec . let_binding SEMI expr_with_let_expr [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

Ill-formed 'let' expression.
At this point expected a let binding.

interactive_expr: Let Rec WILD EQ Bytes SEMI VBAR
##
## Ends in an error in state: 398.
##
## let_expr(expr_with_let_expr) -> seq(Attr) Let Rec let_binding SEMI . expr_with_let_expr [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding SEMI
##

Ill-formed 'let' expression.
At this point expected an expression.

interactive_expr: Let Rec WILD EQ Bytes VBAR
##
## Ends in an error in state: 397.
##
## let_expr(expr_with_let_expr) -> seq(Attr) Let Rec let_binding . SEMI expr_with_let_expr [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
## In state 515, spurious reduction of production let_binding -> WILD option(type_annotation) EQ expr 
##

Ill-formed 'let' expression.
At this point a semicolon ';' is expected, 
  followed by an expression.

interactive_expr: Let Verbatim
##
## Ends in an error in state: 354.
##
## let_expr(expr_with_let_expr) -> seq(Attr) Let . let_binding SEMI expr_with_let_expr [ SEMI RBRACE EOF ]
## let_expr(expr_with_let_expr) -> seq(Attr) Let . Rec let_binding SEMI expr_with_let_expr [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

Ill-formed 'let' expression.
At this point one of the following is expected:
  a let binding; or 
  a 'rec' keyword, 
    followed by a let binding.

interactive_expr: Let WILD EQ Bytes SEMI VBAR
##
## Ends in an error in state: 403.
##
## let_expr(expr_with_let_expr) -> seq(Attr) Let let_binding SEMI . expr_with_let_expr [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding SEMI
##

Ill-formed 'let' expression.
At this point an expression is expected.

interactive_expr: Let WILD EQ Bytes VBAR
##
## Ends in an error in state: 402.
##
## let_expr(expr_with_let_expr) -> seq(Attr) Let let_binding . SEMI expr_with_let_expr [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
## In state 515, spurious reduction of production let_binding -> WILD option(type_annotation) EQ expr 
##

Ill-formed 'let' expression.
At this point a semicolon ';' is expected,
  followed by an expression.

interactive_expr: MINUS VBAR
##
## Ends in an error in state: 96.
##
## unary_expr_level -> MINUS . call_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## MINUS
##

Ill-formed unary operation. 
At this point an expression is expected.

interactive_expr: NOT VBAR
##
## Ends in an error in state: 92.
##
## unary_expr_level -> NOT . call_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## NOT
##

Ill-formed unary operation.
At this point an expression is expected.

interactive_expr: Switch Constr WILD
##
## Ends in an error in state: 118.
##
## module_field -> Constr . DOT module_fun [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## projection -> Constr . DOT Ident selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

Ill-formed module path.
At this point a dot '.' is expected,
  followed by an identifier.

interactive_expr: Switch LBRACE WILD
##
## Ends in an error in state: 251.
##
## update_record -> LBRACE . ELLIPSIS path COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed functional record update.
At this point an ellipsis '...' is expected.

interactive_expr: Switch LBRACKET VBAR
##
## Ends in an error in state: 239.
##
## code_insert -> LBRACKET . PERCENT Constr expr RBRACKET [ LBRACE ]
## list__(expr) -> LBRACKET . option(sep_or_term_list(expr,COMMA)) RBRACKET [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed expression.
If this is a code insert, 
  then at this point a percentage '%' is expected.
If this is a list expression,
  then at this point an expression is expected.

interactive_expr: Switch LBRACKET WILD COMMA VBAR
##
## Ends in an error in state: 246.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(expr,COMMA)) -> expr COMMA . seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Ill-formed 'list' expression.
At this point an expression is expected.

interactive_expr: Switch LBRACKET WILD COMMA WILD COMMA VBAR
##
## Ends in an error in state: 249.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RBRACKET ]
## seq(__anonymous_0(expr,COMMA)) -> expr COMMA . seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Ill-formed 'list' expression.
At this point an expression is expected.

interactive_expr: Switch LPAR VBAR
##
## Ends in an error in state: 90.
##
## par(expr) -> LPAR . expr RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## unit -> LPAR . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed expression.
If this is parenthesized expression, 
  then at this point an expression is expected.
If this is a unit, 
  then at this point a closing parenthesis ')' is expected.

interactive_expr: Switch LPAR WILD VBAR
##
## Ends in an error in state: 452.
##
## par(expr) -> LPAR expr . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LPAR LE LBRACE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
##

Ill-formed parenthesized expression.
At this point a closing parenthesis ')' is expected.

interactive_expr: Switch VBAR
##
## Ends in an error in state: 86.
##
## switch_expr(base_cond) -> Switch . switch_expr_ LBRACE cases(base_cond) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Switch
##

Ill-formed 'switch' expression.
At this point an expression is expected.

interactive_expr: Switch WILD LBRACE VBAR LBRACKET VBAR
##
## Ends in an error in state: 336.
##
## list__(sub_pattern) -> LBRACKET . option(sep_or_term_list(sub_pattern,COMMA)) RBRACKET [ COMMA ARROW ]
## pattern -> LBRACKET . sub_pattern COMMA ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed 'switch' case.
At this point a pattern is expected.

interactive_expr: Switch WILD LBRACE VBAR LBRACKET WILD COMMA ELLIPSIS VBAR
##
## Ends in an error in state: 339.
##
## pattern -> LBRACKET sub_pattern COMMA ELLIPSIS . sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA ELLIPSIS
##

Ill-formed list pattern.
At this point a pattern is expected.

interactive_expr: Switch WILD LBRACE VBAR LBRACKET WILD COMMA ELLIPSIS WILD WILD
##
## Ends in an error in state: 340.
##
## pattern -> LBRACKET sub_pattern COMMA ELLIPSIS sub_pattern . RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA ELLIPSIS sub_pattern
##

Ill-formed list pattern.
At this point a closing bracket ']' is expected. 

interactive_expr: Switch WILD LBRACE VBAR LBRACKET WILD COMMA VBAR
##
## Ends in an error in state: 338.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern COMMA . seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
## pattern -> LBRACKET sub_pattern COMMA . ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA
##

Ill-formed list pattern.
At this point expected one of the following:
  a pattern; or
  an ellipsis,
    followed by a pattern.

interactive_expr: Switch WILD LBRACE VBAR LBRACKET WILD WILD
##
## Ends in an error in state: 337.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern . COMMA seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
## pattern -> LBRACKET sub_pattern . COMMA ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern
##

Ill-formed list pattern.
At this point one of the following is expected: 
  a comma ','; or
  a closing bracket ']'.

interactive_expr: Switch WILD LBRACE VBAR LPAR Bytes RPAR WILD
##
## Ends in an error in state: 343.
##
## tuple(sub_pattern) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

Ill-formed tuple pattern.
At this point one of the following is expected:
  a comma ',',
    followed by a pattern; or
  an arrow '=>'.

interactive_expr: Switch WILD LBRACE VBAR VBAR
##
## Ends in an error in state: 503.
##
## case_clause(base_cond) -> VBAR . pattern ARROW base_cond option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR
##

Ill-formed 'switch' case.
At this point a pattern is expected.

interactive_expr: Switch WILD LBRACE VBAR WILD ARROW Bytes SEMI WILD
##
## Ends in an error in state: 511.
##
## nseq(case_clause(base_cond)) -> case_clause(base_cond) . seq(case_clause(base_cond)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_cond)
##

Ill-formed 'switch' expression.
At this point one of the following is expected:
  a switch case; or
  a closing brace '}'.

interactive_expr: Switch WILD LBRACE VBAR WILD ARROW Bytes VBAR Bytes ARROW Bytes SEMI WILD
##
## Ends in an error in state: 513.
##
## seq(case_clause(base_cond)) -> case_clause(base_cond) . seq(case_clause(base_cond)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause(base_cond)
##

Ill-formed 'switch' expression.
At this point one of the following is expected:
  a switch case; or
  a closing brace '}'.

interactive_expr: Switch WILD LBRACE VBAR WILD ARROW VBAR
##
## Ends in an error in state: 505.
##
## case_clause(base_cond) -> VBAR pattern ARROW . base_cond option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern ARROW
##

Ill-formed 'switch' case.
At this point an expression is expected.

interactive_expr: Switch WILD LBRACE VBAR WILD ARROW WILD Type
##
## Ends in an error in state: 506.
##
## case_clause(base_cond) -> VBAR pattern ARROW base_cond . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern ARROW base_cond
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
##

Ill-formed 'switch' expression.
At this point one of the following is expected:
  a switch case; or
  a closing brace '}'.

interactive_expr: Switch WILD LBRACE VBAR WILD COMMA Bytes RPAR
##
## Ends in an error in state: 504.
##
## case_clause(base_cond) -> VBAR pattern . ARROW base_cond option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 331, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern 
## In state 333, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA) 
## In state 342, spurious reduction of production pattern -> tuple(sub_pattern) 
##

Ill-formed 'switch' case.
At this point an arrow '=>' is expected.

interactive_expr: Switch WILD LBRACE VBAR WILD COMMA VBAR
##
## Ends in an error in state: 330.
##
## tuple(sub_pattern) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

Ill-formed 'switch' case.
At this point a pattern is expected.

interactive_expr: Switch WILD LBRACE VBAR WILD COMMA WILD COMMA VBAR
##
## Ends in an error in state: 332.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

Ill-formed 'switch' case.
At this point a pattern is expected.

interactive_expr: Switch WILD LBRACE VBAR WILD COMMA WILD WILD
##
## Ends in an error in state: 331.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RPAR ARROW ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

Ill-formed 'switch' case.
At this point one of the following is expected:
  a comma ',',
    followed by a pattern; or
  an arrow '=>'.

interactive_expr: Switch WILD LBRACE VBAR WILD WILD
##
## Ends in an error in state: 430.
##
## pattern -> core_pattern . [ ARROW ]
## sub_pattern -> core_pattern . [ COMMA ]
##
## The known suffix of the stack is as follows:
## core_pattern
##

Ill-formed 'switch' case.
At this point one of the following is expected:
  a comma ',',
    followed by a pattern; or
  an arrow '=>'.
  
interactive_expr: Switch WILD LBRACE WILD
##
## Ends in an error in state: 502.
##
## switch_expr(base_cond) -> Switch switch_expr_ LBRACE . cases(base_cond) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Switch switch_expr_ LBRACE
##

Ill-formed 'switch' expression.
At this point a switch case is expected.

interactive_expr: Switch WILD WILD
##
## Ends in an error in state: 501.
##
## switch_expr(base_cond) -> Switch switch_expr_ . LBRACE cases(base_cond) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Switch switch_expr_
##

Ill-formed 'switch' expression.
At this point an opening brace '{' is expected.

interactive_expr: VBAR
##
## Ends in an error in state: 526.
##
## interactive_expr' -> . interactive_expr [ # ]
##
## The known suffix of the stack is as follows:
##
##

Ill-formed expression.

interactive_expr: WILD ARROW VBAR
##
## Ends in an error in state: 221.
##
## fun_expr(expr) -> disj_expr_level ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Let EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level ARROW
##

Ill-formed function expression.
At this point an expression is expected.

interactive_expr: WILD BOOL_AND VBAR
##
## Ends in an error in state: 175.
##
## bin_op(conj_expr_level,BOOL_AND,comp_expr_level) -> conj_expr_level BOOL_AND . comp_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## conj_expr_level BOOL_AND
##

Ill-formed binary '&&' operation.
At this point an expression is expected.

interactive_expr: WILD BOOL_OR VBAR
##
## Ends in an error in state: 219.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level BOOL_OR . conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA BOOL_OR Attr ARROW ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BOOL_OR
##

Ill-formed binary '||' operation.
At this point an expression is expected.

interactive_expr: WILD CAT VBAR
##
## Ends in an error in state: 198.
##
## bin_op(add_expr_level,CAT,cat_expr_level) -> add_expr_level CAT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr_level CAT
##


Ill-formed string concatenation '++'.
At this point an expression is expected. 

interactive_expr: WILD COLON Ident LPAR Ident VBAR
##
## Ends in an error in state: 141.
##
## nsepseq(type_expr_simple,COMMA) -> type_expr_simple . [ RPAR ]
## nsepseq(type_expr_simple,COMMA) -> type_expr_simple . COMMA nsepseq(type_expr_simple,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr_simple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 139, spurious reduction of production option(type_expr_simple_args) -> 
## In state 148, spurious reduction of production type_expr_simple -> Ident option(type_expr_simple_args) 
##

Ill-formed type expression.
At this point one of the following is expected:
  a comma ',',
    followed by a type expression; or
  a closing parenthesis ')'.

interactive_expr: WILD COLON Ident LPAR WILD
##
## Ends in an error in state: 140.
##
## par(nsepseq(type_expr_simple,COMMA)) -> LPAR . nsepseq(type_expr_simple,COMMA) RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed type expression.
At this point a type expression is expected.

interactive_expr: WILD COLON Ident WILD
##
## Ends in an error in state: 139.
##
## type_expr_simple -> Ident . option(type_expr_simple_args) [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed type expression.
At this point one of the following is expected:
  type arguments; or
  a semicolon ';'.

interactive_expr: WILD COLON LPAR Ident ARROW Ident VBAR
##
## Ends in an error in state: 151.
##
## type_expr_simple -> LPAR type_expr_simple ARROW type_expr_simple . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr_simple ARROW type_expr_simple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 139, spurious reduction of production option(type_expr_simple_args) -> 
## In state 148, spurious reduction of production type_expr_simple -> Ident option(type_expr_simple_args) 
##

Ill-formed function type expression.
At this point a closing parenthesis ')' is expected.

interactive_expr: WILD COLON LPAR Ident ARROW WILD
##
## Ends in an error in state: 150.
##
## type_expr_simple -> LPAR type_expr_simple ARROW . type_expr_simple RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr_simple ARROW
##

Ill-formed function type expression.
At this point a type expression is expected,
  followed by a closing parenthesis ')'.

interactive_expr: WILD COLON LPAR Ident COMMA WILD
##
## Ends in an error in state: 142.
##
## nsepseq(type_expr_simple,COMMA) -> type_expr_simple COMMA . nsepseq(type_expr_simple,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr_simple COMMA
##

Ill-formed type expression.

interactive_expr: WILD COLON LPAR Ident RPAR WILD
##
## Ends in an error in state: 158.
##
## add_expr_level -> mult_expr_level . [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS Or NE MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,Mod,unary_expr_level) -> mult_expr_level . Mod unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level . SLASH unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level . TIMES unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr_level
##

Ill-formed expression.
At this point one of the following is expected:
  an operator; or
  a semicolon ';'.

interactive_expr: WILD COLON LPAR Ident VBAR
##
## Ends in an error in state: 149.
##
## nsepseq(type_expr_simple,COMMA) -> type_expr_simple . [ RPAR ]
## nsepseq(type_expr_simple,COMMA) -> type_expr_simple . COMMA nsepseq(type_expr_simple,COMMA) [ RPAR ]
## type_expr_simple -> LPAR type_expr_simple . ARROW type_expr_simple RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr_simple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 139, spurious reduction of production option(type_expr_simple_args) -> 
## In state 148, spurious reduction of production type_expr_simple -> Ident option(type_expr_simple_args) 
##

Ill-formed type expression.
At this point one of the following is expected:
  an arrow '=>',
    followed by a type expression; or
  a comma ',',
    followed by a type expression; or
  a closing parenthesis ')'.

interactive_expr: WILD COLON LPAR WILD
##
## Ends in an error in state: 138.
##
## type_expr_simple -> LPAR . nsepseq(type_expr_simple,COMMA) RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## type_expr_simple -> LPAR . type_expr_simple ARROW type_expr_simple RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed type expression.

interactive_expr: WILD COLON WILD
##
## Ends in an error in state: 137.
##
## type_annotation_simple -> COLON . type_expr_simple [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## COLON
##

Ill-formed type expression.

interactive_expr: WILD EQEQ VBAR
##
## Ends in an error in state: 208.
##
## bin_op(comp_expr_level,EQEQ,cat_expr_level) -> comp_expr_level EQEQ . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr_level EQEQ
##

Ill-formed binary '==' operation.
At this point an expression is expected.

interactive_expr: WILD GE VBAR
##
## Ends in an error in state: 206.
##
## bin_op(comp_expr_level,GE,cat_expr_level) -> comp_expr_level GE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GE
##

Ill-formed binary '>=' operation.
At this point an expression is expected.

interactive_expr: WILD GT VBAR
##
## Ends in an error in state: 204.
##
## bin_op(comp_expr_level,GT,cat_expr_level) -> comp_expr_level GT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GT
##

Ill-formed binary '>' operation.
At this point an expression is expected.

interactive_expr: WILD LE VBAR
##
## Ends in an error in state: 202.
##
## bin_op(comp_expr_level,LE,cat_expr_level) -> comp_expr_level LE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LE
##

Ill-formed binary '<=' operation.
At this point an expression is expected.

interactive_expr: WILD LPAR VBAR
##
## Ends in an error in state: 162.
##
## call_expr -> core_expr LPAR . nsepseq(expr,COMMA) RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## unit -> LPAR . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## core_expr LPAR
##

Up to this point a function call has been recognized.
At this point one of the following is expected:
  an expression; or
  a closing parenthesis ')'.

interactive_expr: WILD LPAR WILD COMMA VBAR
##
## Ends in an error in state: 169.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Up to this point a function call has been recognized.
At this point an expression is expected.

interactive_expr: WILD LPAR WILD VBAR
##
## Ends in an error in state: 168.
##
## nsepseq(expr,COMMA) -> expr . [ RPAR ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
##

Up to this point a function call has been recognized.
At this point one of the following is expected:
  a comma ',',
    followed by an expression; or
  a closing parenthesis ')'.

interactive_expr: WILD LT VBAR
##
## Ends in an error in state: 200.
##
## bin_op(comp_expr_level,LT,cat_expr_level) -> comp_expr_level LT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LT
##

Ill-formed binary '<' operation.
At this point an expression is expected.

interactive_expr: WILD MINUS VBAR
##
## Ends in an error in state: 196.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS . mult_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS Or NE MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS
##

Ill-formed binary '-' operation.
At this point an expression is expected.

interactive_expr: WILD MINUS WILD COLON LPAR Ident RPAR WILD
##
## Ends in an error in state: 197.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS mult_expr_level . [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS Or NE MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,Mod,unary_expr_level) -> mult_expr_level . Mod unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level . SLASH unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level . TIMES unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS mult_expr_level
##

At this point an operator, like '-', 'mod', '/', or '*', is expected.

interactive_expr: WILD Mod VBAR
##
## Ends in an error in state: 194.
##
## bin_op(mult_expr_level,Mod,unary_expr_level) -> mult_expr_level Mod . unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Mod
##

Ill-formed binary 'mod' operation.
At this point an expression is expected.

interactive_expr: WILD NE VBAR
##
## Ends in an error in state: 177.
##
## bin_op(comp_expr_level,NE,cat_expr_level) -> comp_expr_level NE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Let LT LE GT GE EQEQ EOF COMMA BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr_level NE
##

Ill-formed binary '!=' operation.
At this point an expression is expected.

interactive_expr: WILD Or VBAR
##
## Ends in an error in state: 172.
##
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level Or . conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Let EOF COMMA BOOL_OR Attr ARROW ]
##
## The known suffix of the stack is as follows:
## disj_expr_level Or
##

Ill-formed binary '||' operation.
At this point an expression is expected.

interactive_expr: WILD PLUS VBAR
##
## Ends in an error in state: 190.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS . mult_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS Or NE MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS
##

Ill-formed binary '+' operation.
At this point an expression is expected.

interactive_expr: WILD PLUS WILD COLON LPAR Ident RPAR WILD
##
## Ends in an error in state: 191.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS mult_expr_level . [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS Or NE MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,Mod,unary_expr_level) -> mult_expr_level . Mod unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level . SLASH unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level . TIMES unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS mult_expr_level
##

At this point an operator, like '-', 'mod', '/', or '*', is expected.

interactive_expr: WILD SLASH VBAR
##
## Ends in an error in state: 192.
##
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level SLASH . unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr_level SLASH
##

Ill-formed binary '/' operation.
At this point an expression is expected.

interactive_expr: WILD TIMES VBAR
##
## Ends in an error in state: 159.
##
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level TIMES . unary_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr_level TIMES
##

Ill-formed binary '*' operation.
At this point an expression is expected.

interactive_expr: WILD VBAR
##
## Ends in an error in state: 528.
##
## interactive_expr -> expr_with_let_expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr_with_let_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
## In state 401, spurious reduction of production expr_with_let_expr -> expr 
##

At this point end of the file is expected.

interactive_expr: WILD WILD
##
## This should never happen.
##
## Ends in an error in state: 161.
##
## call_expr -> core_expr . LPAR nsepseq(expr,COMMA) RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## call_expr -> core_expr . unit [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
## call_expr_level_in -> core_expr . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS Or NE Mod MINUS Let LT LE GT GE EQEQ EOF COMMA COLON CAT BOOL_OR BOOL_AND Attr ARROW ]
##
## The known suffix of the stack is as follows:
## core_expr
##

This error should not occur! If it does, the wild pattern check is broken.

contract: Attr WILD
##
## Ends in an error in state: 70.
##
## seq(Attr) -> Attr . seq(Attr) [ Let ]
##
## The known suffix of the stack is as follows:
## Attr
##

At this point one of the following is expected:
  another attribute; or
  a let declaration.

contract: Let Ident COLON String WILD
##
## Ends in an error in state: 377.
##
## let_binding -> Ident option(type_annotation) . EQ expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Ident option(type_annotation)
##

Ill-formed let declaration.
At this point an equals '=' symbol is expected.

contract: Let Ident EQ VBAR
##
## Ends in an error in state: 378.
##
## let_binding -> Ident option(type_annotation) EQ . expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Ident option(type_annotation) EQ
##

Expected an expression as part of the let binding.
-
Examples of correct let bindings:
let a: int = 4;
let (a: int, b: int) = (1, 2);
let func = (a: int, b: int) => a + b;

contract: Let Ident WILD
##
## Ends in an error in state: 376.
##
## let_binding -> Ident . option(type_annotation) EQ expr [ Type SEMI Let EOF Attr ]
## sub_irrefutable -> Ident . [ COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

Expected either:
- a type annotation
- `=` and an expression
- a `,` and a pattern

contract: Let LBRACE Ident EQ Bytes COMMA Ident EQ Bytes COMMA WILD
##
## Ends in an error in state: 313.
##
## nsepseq(field_pattern,COMMA) -> field_pattern COMMA . nsepseq(field_pattern,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern,COMMA)) -> field_pattern COMMA . seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern COMMA
##

Expected a update_record field pattern.

contract: Let LBRACE Ident EQ Bytes COMMA Ident EQ Bytes WILD
##
## Ends in an error in state: 312.
##
## nsepseq(field_pattern,COMMA) -> field_pattern . [ RBRACE ]
## nsepseq(field_pattern,COMMA) -> field_pattern . COMMA nsepseq(field_pattern,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern,COMMA)) -> field_pattern . COMMA seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern
##

Expected either a `,` and record field pattern, or a closing `}`.

contract: Let LBRACE Ident EQ Bytes COMMA WILD
##
## Ends in an error in state: 309.
##
## nsepseq(field_pattern,COMMA) -> field_pattern COMMA . nsepseq(field_pattern,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern,COMMA)) -> field_pattern COMMA . seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern COMMA
##

Expected a record field pattern.

contract: Let LBRACE Ident EQ Bytes RBRACE COLON String WILD
##
## Ends in an error in state: 390.
##
## let_binding -> record_pattern option(type_annotation) . EQ expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## record_pattern option(type_annotation)
##

Expected an `=` as part of the let binding.

contract: Let LBRACE Ident EQ Bytes RBRACE EQ VBAR
##
## Ends in an error in state: 391.
##
## let_binding -> record_pattern option(type_annotation) EQ . expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## record_pattern option(type_annotation) EQ
##

Expected an expression.

contract: Let LBRACE Ident EQ Bytes RBRACE WILD
##
## Ends in an error in state: 389.
##
## let_binding -> record_pattern . option(type_annotation) EQ expr [ Type SEMI Let EOF Attr ]
## sub_irrefutable -> record_pattern . [ COMMA ]
##
## The known suffix of the stack is as follows:
## record_pattern
##

Expected either:
- a type annotation
- `=` and an expression
- a `,` and a pattern

contract: Let LBRACE Ident EQ Bytes WILD
##
## Ends in an error in state: 308.
##
## nsepseq(field_pattern,COMMA) -> field_pattern . [ RBRACE ]
## nsepseq(field_pattern,COMMA) -> field_pattern . COMMA nsepseq(field_pattern,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern,COMMA)) -> field_pattern . COMMA seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern
##

Expected either:
- a closing `}`
- a `,` and another field pattern

contract: Let LBRACE Ident EQ VBAR
##
## Ends in an error in state: 286.
##
## field_pattern -> Ident EQ . sub_pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident EQ
##

Expected a pattern.

contract: Let LBRACE Ident WILD
##
## Ends in an error in state: 285.
##
## field_pattern -> Ident . EQ sub_pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

Expected a `=` as part of the record field pattern.

contract: Let LBRACE WILD
##
## Ends in an error in state: 284.
##
## record_pattern -> LBRACE . sep_or_term_list(field_pattern,COMMA) RBRACE [ RPAR RBRACKET RBRACE EQ COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Expected a record field pattern.

contract: Let LPAR C_Some VBAR
##
## Ends in an error in state: 291.
##
## constr_pattern -> C_Some . sub_pattern [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## C_Some
##

Expected a pattern.

contract: Let LPAR Constr LBRACKET VBAR
##
## Ends in an error in state: 283.
##
## list__(sub_pattern) -> LBRACKET . option(sep_or_term_list(sub_pattern,COMMA)) RBRACKET [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Expected a pattern.

contract: Let LPAR Constr LBRACKET WILD COMMA VBAR
##
## Ends in an error in state: 316.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern COMMA . seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

Expected a pattern.

contract: Let LPAR Constr LBRACKET WILD COMMA WILD COMMA VBAR
##
## Ends in an error in state: 318.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## seq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern COMMA . seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

Expected a pattern.

contract: Let LPAR Constr LBRACKET WILD COMMA WILD WILD
##
## Ends in an error in state: 317.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## seq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern . COMMA seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

Expected a `,` and another pattern, or a closing `]`.

contract: Let LPAR Constr LBRACKET WILD WILD
##
## Ends in an error in state: 315.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern . COMMA seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

Expected a `,` and another pattern, or a closing `]`.

contract: Let LPAR Constr LPAR VBAR
##
## Ends in an error in state: 282.
##
## par(ptuple) -> LPAR . ptuple RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
## par(sub_pattern) -> LPAR . sub_pattern RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
## unit -> LPAR . RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Expected either a pattern or closing `)`.

contract: Let LPAR Constr LPAR WILD COMMA Bytes ARROW
##
## Ends in an error in state: 334.
##
## par(ptuple) -> LPAR ptuple . RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR ptuple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 331, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern 
## In state 333, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA) 
## In state 327, spurious reduction of production ptuple -> tuple(sub_pattern) 
##

Expected a closing `)`.

contract: Let LPAR Constr LPAR WILD WILD
##
## Ends in an error in state: 328.
##
## par(sub_pattern) -> LPAR sub_pattern . RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
## tuple(sub_pattern) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR sub_pattern
##

Expected a `,` and another pattern, or a closing `)`.

contract: Let LPAR Constr RBRACKET
##
## Ends in an error in state: 374.
##
## par(closed_irrefutable) -> LPAR closed_irrefutable . RPAR [ RPAR EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR closed_irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 290, spurious reduction of production constr_pattern -> Constr 
## In state 373, spurious reduction of production closed_irrefutable -> constr_pattern 
##

Expected a closing `)`.

contract: Let LPAR Constr VBAR
##
## Ends in an error in state: 290.
##
## constr_pattern -> Constr . sub_pattern [ RPAR RBRACKET RBRACE COMMA ARROW ]
## constr_pattern -> Constr . [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

Uexpected token.

contract: Let LPAR RPAR COLON String WILD
##
## Ends in an error in state: 381.
##
## let_binding -> unit option(type_annotation) . EQ expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## unit option(type_annotation)
##

Expected `=`.

contract: Let LPAR RPAR EQ VBAR
##
## Ends in an error in state: 382.
##
## let_binding -> unit option(type_annotation) EQ . expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## unit option(type_annotation) EQ
##

Expected an expression.

contract: Let LPAR RPAR WILD
##
## Ends in an error in state: 380.
##
## let_binding -> unit . option(type_annotation) EQ expr [ Type SEMI Let EOF Attr ]
## sub_irrefutable -> unit . [ COMMA ]
##
## The known suffix of the stack is as follows:
## unit
##

Expected either:
- a type annotation 
- a `=` and an expression
- a `,` and another pattern.

contract: Let LPAR Verbatim
##
## Ends in an error in state: 356.
##
## par(closed_irrefutable) -> LPAR . closed_irrefutable RPAR [ RPAR EQ COMMA COLON ]
## unit -> LPAR . RPAR [ RPAR EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Expected a pattern or closing `)`.

contract: Let LPAR WILD COLON WILD
##
## Ends in an error in state: 371.
##
## typed_pattern -> irrefutable COLON . type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## irrefutable COLON
##

Expected a type expression.

contract: Let LPAR WILD COMMA Ident EQ
##
## Ends in an error in state: 370.
##
## closed_irrefutable -> irrefutable . [ RPAR ]
## typed_pattern -> irrefutable . COLON type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 364, spurious reduction of production nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable 
## In state 369, spurious reduction of production tuple(sub_irrefutable) -> sub_irrefutable COMMA nsepseq(sub_irrefutable,COMMA) 
## In state 361, spurious reduction of production irrefutable -> tuple(sub_irrefutable) 
##

Expected a type annotation or a closing `)`.

contract: Let LPAR WILD RPAR COLON String WILD
##
## Ends in an error in state: 394.
##
## let_binding -> par(closed_irrefutable) option(type_annotation) . EQ expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## par(closed_irrefutable) option(type_annotation)
##

Expected a `=` as part of the let binding.

contract: Let LPAR WILD RPAR EQ VBAR
##
## Ends in an error in state: 395.
##
## let_binding -> par(closed_irrefutable) option(type_annotation) EQ . expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## par(closed_irrefutable) option(type_annotation) EQ
##

Expected an expression.

contract: Let LPAR WILD RPAR WILD
##
## Ends in an error in state: 393.
##
## let_binding -> par(closed_irrefutable) . option(type_annotation) EQ expr [ Type SEMI Let EOF Attr ]
## sub_irrefutable -> par(closed_irrefutable) . [ COMMA ]
##
## The known suffix of the stack is as follows:
## par(closed_irrefutable)
##

Expected a `,` and another expression, or a type annotation.

contract: Let LPAR WILD WILD
##
## Ends in an error in state: 362.
##
## irrefutable -> sub_irrefutable . [ RPAR COLON ]
## tuple(sub_irrefutable) -> sub_irrefutable . COMMA nsepseq(sub_irrefutable,COMMA) [ RPAR COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##

Unexpected token.

contract: Let Rec Verbatim
##
## Ends in an error in state: 516.
##
## let_declaration -> seq(Attr) Let Rec . let_binding [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let Rec
##

Expected a let binding.

contract: Let Verbatim
##
## Ends in an error in state: 76.
##
## let_declaration -> seq(Attr) Let . let_binding [ Type SEMI Let EOF Attr ]
## let_declaration -> seq(Attr) Let . Rec let_binding [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## seq(Attr) Let
##

Expected a let binding.

contract: Let WILD COLON String WILD
##
## Ends in an error in state: 81.
##
## let_binding -> WILD option(type_annotation) . EQ expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## WILD option(type_annotation)
##

Expected `=` as part of the let binding.

contract: Let WILD COLON WILD
##
## Ends in an error in state: 78.
##
## type_annotation -> COLON . type_expr [ EQ ]
##
## The known suffix of the stack is as follows:
## COLON
##

Expected a type expression.

contract: Let WILD COMMA Ident COLON String WILD
##
## Ends in an error in state: 385.
##
## let_binding -> tuple(sub_irrefutable) option(type_annotation) . EQ expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## tuple(sub_irrefutable) option(type_annotation)
##

Expected `=` as part of the let binding.

contract: Let WILD COMMA Ident EQ VBAR
##
## Ends in an error in state: 386.
##
## let_binding -> tuple(sub_irrefutable) option(type_annotation) EQ . expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## tuple(sub_irrefutable) option(type_annotation) EQ
##

Expected an expression.

contract: Let WILD COMMA Ident RPAR
##
## Ends in an error in state: 384.
##
## let_binding -> tuple(sub_irrefutable) . option(type_annotation) EQ expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## tuple(sub_irrefutable)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 364, spurious reduction of production nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable 
## In state 369, spurious reduction of production tuple(sub_irrefutable) -> sub_irrefutable COMMA nsepseq(sub_irrefutable,COMMA) 
##

Expected either a type annotation or `=` followed by an expression.

contract: Let WILD COMMA Verbatim
##
## Ends in an error in state: 363.
##
## tuple(sub_irrefutable) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##

Expected a pattern.

contract: Let WILD COMMA WILD COMMA Verbatim
##
## Ends in an error in state: 365.
##
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##

Unexpected token.

contract: Let WILD COMMA WILD WILD
##
## Ends in an error in state: 364.
##
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable . [ RPAR EQ COLON ]
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable . COMMA nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##

Unexpected token.

contract: Let WILD EQ Bytes VBAR
##
## Ends in an error in state: 519.
##
## declaration -> let_declaration . option(SEMI) [ Type Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## let_declaration
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production call_expr_level_in -> core_expr 
## In state 179, spurious reduction of production option(type_annotation_simple) -> 
## In state 180, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 181, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 134, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 158, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 189, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 210, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 217, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 224, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 171, spurious reduction of production base_expr -> disj_expr_level 
## In state 228, spurious reduction of production base_cond -> base_expr 
## In state 229, spurious reduction of production expr -> base_cond 
## In state 515, spurious reduction of production let_binding -> WILD option(type_annotation) EQ expr 
## In state 518, spurious reduction of production let_declaration -> seq(Attr) Let let_binding 
##

Unexpected token.

contract: Let WILD EQ VBAR
##
## Ends in an error in state: 82.
##
## let_binding -> WILD option(type_annotation) EQ . expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## WILD option(type_annotation) EQ
##

Unexpected token.

contract: Let WILD WILD
##
## Ends in an error in state: 77.
##
## let_binding -> WILD . option(type_annotation) EQ expr [ Type SEMI Let EOF Attr ]
## sub_irrefutable -> WILD . [ COMMA ]
##
## The known suffix of the stack is as follows:
## WILD
##

Unexpected token.

contract: Type Ident EQ Constr DOT WILD
##
## Ends in an error in state: 12.
##
## core_type -> Constr DOT . Ident [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

Expected an indentifier.

contract: Type Ident EQ Constr LPAR Ident RPAR WILD
##
## Ends in an error in state: 38.
##
## nsepseq(variant,VBAR) -> variant . [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
## nsepseq(variant,VBAR) -> variant . VBAR nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## variant
##

Expected another variant or another declaration.

contract: Type Ident EQ Constr LPAR String WILD
##
## Ends in an error in state: 36.
##
## variant -> Constr LPAR fun_type . RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Constr LPAR fun_type
##

Expected token.

contract: Type Ident EQ Constr LPAR WILD
##
## Ends in an error in state: 6.
##
## variant -> Constr LPAR . fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Constr LPAR
##

Not a valid argument.

contract: Type Ident EQ Constr SEMI WILD
##
## Ends in an error in state: 523.
##
## declarations -> declaration . [ EOF ]
## declarations -> declaration . declarations [ EOF ]
##
## The known suffix of the stack is as follows:
## declaration
##

Unexpected token. Expected a declaration.

contract: Type Ident EQ Constr VBAR WILD
##
## Ends in an error in state: 39.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##

Not a valid constructor.

contract: Type Ident EQ Constr WILD
##
## Ends in an error in state: 49.
##
## core_type -> Constr . DOT Ident [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
## variant -> Constr . [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
## variant -> Constr . LPAR fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Constr
##

Unexpected token.

contract: Type Ident EQ Ident ARROW WILD
##
## Ends in an error in state: 25.
##
## fun_type -> Ident ARROW . fun_type [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Ident ARROW
##

Not a valid type.

contract: Type Ident EQ Ident LPAR String WILD
##
## Ends in an error in state: 18.
##
## tuple(fun_type) -> fun_type . COMMA nsepseq(fun_type,COMMA) [ RPAR ]
## type_args -> fun_type . [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type
##

Unexpected token. Expected either `,` or `)`.

contract: Type Ident EQ Ident LPAR WILD
##
## Ends in an error in state: 10.
##
## par(type_args) -> LPAR . type_args RPAR [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Expected an argument. 

contract: Type Ident EQ Ident WILD
##
## Ends in an error in state: 9.
##
## core_type -> Ident . [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
## core_type -> Ident . par(type_args) [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
## fun_type -> Ident . ARROW fun_type [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Ident
##

Not a valid type declaration. Expected either type arguments, `=>`, or another 
declaration.

contract: Type Ident EQ LBRACE Ident COLON Ident WILD
##
## Ends in an error in state: 48.
##
## core_type -> Ident . [ RBRACE COMMA ]
## core_type -> Ident . par(type_args) [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

Unexpected token.

contract: Type Ident EQ LBRACE Ident COLON LPAR String WILD
##
## Ends in an error in state: 46.
##
## par(fun_type) -> LPAR fun_type . RPAR [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR fun_type
##

Unexpected token. Expected either `,` or `}`.

contract: Type Ident EQ LBRACE Ident COLON LPAR WILD
##
## Ends in an error in state: 45.
##
## par(fun_type) -> LPAR . fun_type RPAR [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Expected an argument.

contract: Type Ident EQ LBRACE Ident COLON String WILD
##
## Ends in an error in state: 59.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##

Unexpected token.

contract: Type Ident EQ LBRACE Ident COLON WILD
##
## Ends in an error in state: 44.
##
## field_decl -> Ident COLON . type_expr_field [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

Not a valid expression

contract: Type Ident EQ LBRACE Ident COMMA Ident COLON String WILD
##
## Ends in an error in state: 63.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##

Not a valid record type field declaration.

contract: Type Ident EQ LBRACE Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 64.
##
## nsepseq(field_decl,COMMA) -> field_decl COMMA . nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl COMMA . seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl COMMA
##

Not a valid record type field declaration.

contract: Type Ident EQ LBRACE Ident COMMA WILD
##
## Ends in an error in state: 60.
##
## nsepseq(field_decl,COMMA) -> field_decl COMMA . nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl COMMA . seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl COMMA
##

Incomplete record type field declaration.

contract: Type Ident EQ LBRACE Ident WILD
##
## Ends in an error in state: 43.
##
## field_decl -> Ident . [ RBRACE COMMA ]
## field_decl -> Ident . COLON type_expr_field [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

Incomplete record type field declaration.

contract: Type Ident EQ LBRACE WILD
##
## Ends in an error in state: 42.
##
## record_type -> LBRACE . sep_or_term_list(field_decl,COMMA) RBRACE [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Expected a record type field declaration.

contract: Type Ident EQ LPAR Constr WILD
##
## Ends in an error in state: 11.
##
## core_type -> Constr . DOT Ident [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Constr
##

Incomplete path.

contract: Type Ident EQ LPAR String COMMA Ident RPAR ARROW WILD
##
## Ends in an error in state: 30.
##
## fun_type -> LPAR tuple(fun_type) RPAR ARROW . fun_type [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## LPAR tuple(fun_type) RPAR ARROW
##

Unexpected token.

contract: Type Ident EQ LPAR String COMMA Ident RPAR WILD
##
## Ends in an error in state: 29.
##
## fun_type -> LPAR tuple(fun_type) RPAR . ARROW fun_type [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
## fun_type -> LPAR tuple(fun_type) RPAR . [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## LPAR tuple(fun_type) RPAR
##

Expected either `=>` or another declaration.

contract: Type Ident EQ LPAR String COMMA String COMMA WILD
##
## Ends in an error in state: 22.
##
## nsepseq(fun_type,COMMA) -> fun_type COMMA . nsepseq(fun_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type COMMA
##

Unexpected token.

contract: Type Ident EQ LPAR String COMMA String WILD
##
## Ends in an error in state: 21.
##
## nsepseq(fun_type,COMMA) -> fun_type . [ RPAR ]
## nsepseq(fun_type,COMMA) -> fun_type . COMMA nsepseq(fun_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type
##

Unexpected token.

contract: Type Ident EQ LPAR String COMMA WILD
##
## Ends in an error in state: 19.
##
## tuple(fun_type) -> fun_type COMMA . nsepseq(fun_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_type COMMA
##

Unexpected token.

contract: Type Ident EQ LPAR String RPAR ARROW WILD
##
## Ends in an error in state: 34.
##
## fun_type -> LPAR fun_type RPAR ARROW . fun_type [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## LPAR fun_type RPAR ARROW
##

Not a valid function type.

contract: Type Ident EQ LPAR String RPAR WILD
##
## Ends in an error in state: 33.
##
## fun_type -> LPAR fun_type RPAR . ARROW fun_type [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
## par(fun_type) -> LPAR fun_type RPAR . [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## LPAR fun_type RPAR
##

Unexpected token.

contract: Type Ident EQ LPAR String WILD
##
## Ends in an error in state: 32.
##
## fun_type -> LPAR fun_type . RPAR ARROW fun_type [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
## par(fun_type) -> LPAR fun_type . RPAR [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
## tuple(fun_type) -> fun_type . COMMA nsepseq(fun_type,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR fun_type
##

Unexpected token.

contract: Type Ident EQ LPAR WILD
##
## Ends in an error in state: 8.
##
## fun_type -> LPAR . fun_type RPAR ARROW fun_type [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
## fun_type -> LPAR . tuple(fun_type) RPAR ARROW fun_type [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
## fun_type -> LPAR . tuple(fun_type) RPAR [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
## par(fun_type) -> LPAR . fun_type RPAR [ Type SEMI RPAR Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Unexpected token.

contract: Type Ident EQ String WILD
##
## Ends in an error in state: 72.
##
## declaration -> type_decl . option(SEMI) [ Type Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## type_decl
##

Expected another declaration.

contract: Type Ident EQ VBAR Constr WILD
##
## Ends in an error in state: 5.
##
## variant -> Constr . [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
## variant -> Constr . LPAR fun_type RPAR [ VBAR Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## Constr
##

Unexpected token.

contract: Type Ident EQ VBAR WILD
##
## Ends in an error in state: 4.
##
## sum_type -> VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Let EQ EOF COMMA Attr ]
##
## The known suffix of the stack is as follows:
## VBAR
##

Invalid variant constructor.

contract: Type Ident EQ WILD
##
## Ends in an error in state: 3.
##
## type_decl -> Type Ident EQ . type_expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident EQ
##

Invalid type expression. 

contract: Type Ident WILD
##
## Ends in an error in state: 2.
##
## type_decl -> Type Ident . EQ type_expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

Expected `=`.

contract: Type WILD
##
## Ends in an error in state: 1.
##
## type_decl -> Type . Ident EQ type_expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Type
##

Not a valid type identifier.

contract: WILD
##
## Ends in an error in state: 0.
##
## contract' -> . contract [ # ]
##
## The known suffix of the stack is as follows:
##
##

At this point one of the following is expected:
  a type declaration; or
  a let declaration; or
  an attribute; or
  the end of the file.

