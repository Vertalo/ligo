contract: Let Ident EQ VBAR
##
## Ends in an error in state: 384.
##
## let_binding -> Ident option(type_annotation) EQ . expr [ Type SEMI Let EOF Attr ]
##
## The known suffix of the stack is as follows:
## Ident option(type_annotation) EQ
##

This is an incorrect let binding.
-
Examples of correct let bindings:
let a: int = 4;
let (a: int, b: int) = (1, 2);
let func = (a: int, b: int) => a + b;


interactive_expr: WILD LPAR WILD VBAR
##
## Ends in an error in state: 165.
##
## nsepseq(expr,COMMA) -> expr . [ RPAR ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 158, spurious reduction of production call_expr_level_in -> core_expr 
## In state 176, spurious reduction of production option(type_annotation_simple) -> 
## In state 177, spurious reduction of production call_expr_level -> call_expr_level_in option(type_annotation_simple) 
## In state 178, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 131, spurious reduction of production mult_expr_level -> unary_expr_level 
## In state 155, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 186, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 207, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 214, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 221, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 168, spurious reduction of production base_expr -> disj_expr_level 
## In state 225, spurious reduction of production base_cond -> base_expr 
## In state 226, spurious reduction of production expr -> base_cond 
##

Missing `)`.
