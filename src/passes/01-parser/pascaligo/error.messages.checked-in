interactive_expr: BigMap LBRACKET Verbatim ARROW Bytes End
##
## Ends in an error in state: 150.
##
## injection(BigMap,binding) -> BigMap LBRACKET sep_or_term_list(binding,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap LBRACKET sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 252, spurious reduction of production binding -> expr ARROW expr 
## In state 253, spurious reduction of production nsepseq(binding,SEMI) -> binding 
## In state 249, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: BigMap LBRACKET With
##
## Ends in an error in state: 143.
##
## code_insert_expr -> LBRACKET . PERCENT Constr expr RBRACKET [ TIMES SLASH PLUS Or NE Mod MINUS LT LE GT GE EQ Contains CONS CAT And ARROW ]
## injection(BigMap,binding) -> BigMap LBRACKET . sep_or_term_list(binding,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(BigMap,binding) -> BigMap LBRACKET . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: BigMap Verbatim ARROW Bytes RBRACKET
##
## Ends in an error in state: 261.
##
## injection(BigMap,binding) -> BigMap sep_or_term_list(binding,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 252, spurious reduction of production binding -> expr ARROW expr 
## In state 253, spurious reduction of production nsepseq(binding,SEMI) -> binding 
## In state 249, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: BigMap With
##
## Ends in an error in state: 142.
##
## injection(BigMap,binding) -> BigMap . sep_or_term_list(binding,SEMI) End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(BigMap,binding) -> BigMap . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(BigMap,binding) -> BigMap . LBRACKET sep_or_term_list(binding,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(BigMap,binding) -> BigMap . LBRACKET RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: C_Some With
##
## Ends in an error in state: 138.
##
## core_expr -> C_Some . arguments [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## C_Some
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of C_Some LPAR WILD With
##
## Ends in an error in state: 289.
##
## par(core_pattern) -> LPAR core_pattern . RPAR [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of C_Some LPAR With
##
## Ends in an error in state: 281.
##
## par(core_pattern) -> LPAR . core_pattern RPAR [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of C_Some With
##
## Ends in an error in state: 280.
##
## constr_pattern -> C_Some . par(core_pattern) [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## C_Some
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of Constr LPAR WILD With
##
## Ends in an error in state: 295.
##
## nsepseq(core_pattern,COMMA) -> core_pattern . [ RPAR ]
## nsepseq(core_pattern,COMMA) -> core_pattern . COMMA nsepseq(core_pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of Constr LPAR With
##
## Ends in an error in state: 279.
##
## par(nsepseq(core_pattern,COMMA)) -> LPAR . nsepseq(core_pattern,COMMA) RPAR [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of Constr With
##
## Ends in an error in state: 278.
##
## constr_pattern -> Constr . tuple_pattern [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
## constr_pattern -> Constr . [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LBRACKET VBAR Block
##
## Ends in an error in state: 266.
##
## case(expr) -> Case expr Of LBRACKET option(VBAR) . cases(expr) RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET option(VBAR)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LBRACKET WILD ARROW Bytes End
##
## Ends in an error in state: 330.
##
## case(expr) -> Case expr Of LBRACKET option(VBAR) cases(expr) . RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET option(VBAR) cases(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 328, spurious reduction of production case_clause(expr) -> pattern ARROW expr 
## In state 332, spurious reduction of production nsepseq(case_clause(expr),VBAR) -> case_clause(expr) 
## In state 329, spurious reduction of production cases(expr) -> nsepseq(case_clause(expr),VBAR) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LBRACKET With
##
## Ends in an error in state: 265.
##
## case(expr) -> Case expr Of LBRACKET . option(VBAR) cases(expr) RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LPAR WILD COMMA With
##
## Ends in an error in state: 296.
##
## nsepseq(core_pattern,COMMA) -> core_pattern COMMA . nsepseq(core_pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## core_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LPAR WILD CONS Bytes ARROW
##
## Ends in an error in state: 308.
##
## par(cons_pattern) -> LPAR cons_pattern . RPAR [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR cons_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 302, spurious reduction of production pattern -> core_pattern 
## In state 301, spurious reduction of production cons_pattern -> core_pattern CONS pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LPAR WILD CONS With
##
## Ends in an error in state: 300.
##
## cons_pattern -> core_pattern CONS . pattern [ RPAR ]
##
## The known suffix of the stack is as follows:
## core_pattern CONS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LPAR WILD With
##
## Ends in an error in state: 299.
##
## cons_pattern -> core_pattern . CONS pattern [ RPAR ]
## nsepseq(core_pattern,COMMA) -> core_pattern . [ RPAR ]
## nsepseq(core_pattern,COMMA) -> core_pattern . COMMA nsepseq(core_pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of LPAR With
##
## Ends in an error in state: 274.
##
## par(cons_pattern) -> LPAR . cons_pattern RPAR [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
## par(nsepseq(core_pattern,COMMA)) -> LPAR . nsepseq(core_pattern,COMMA) RPAR [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of List LBRACKET WILD End
##
## Ends in an error in state: 312.
##
## injection(List,core_pattern) -> List LBRACKET sep_or_term_list(core_pattern,SEMI) . RBRACKET [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## List LBRACKET sep_or_term_list(core_pattern,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 316, spurious reduction of production nsepseq(core_pattern,SEMI) -> core_pattern 
## In state 315, spurious reduction of production sep_or_term_list(core_pattern,SEMI) -> nsepseq(core_pattern,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of List LBRACKET With
##
## Ends in an error in state: 310.
##
## injection(List,core_pattern) -> List LBRACKET . sep_or_term_list(core_pattern,SEMI) RBRACKET [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
## injection(List,core_pattern) -> List LBRACKET . RBRACKET [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## List LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of List WILD RBRACKET
##
## Ends in an error in state: 324.
##
## injection(List,core_pattern) -> List sep_or_term_list(core_pattern,SEMI) . End [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## List sep_or_term_list(core_pattern,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 316, spurious reduction of production nsepseq(core_pattern,SEMI) -> core_pattern 
## In state 315, spurious reduction of production sep_or_term_list(core_pattern,SEMI) -> nsepseq(core_pattern,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of List WILD SEMI WILD SEMI With
##
## Ends in an error in state: 321.
##
## nsepseq(core_pattern,SEMI) -> core_pattern SEMI . nsepseq(core_pattern,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(core_pattern,SEMI)) -> core_pattern SEMI . seq(__anonymous_0(core_pattern,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## core_pattern SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of List WILD SEMI WILD With
##
## Ends in an error in state: 320.
##
## nsepseq(core_pattern,SEMI) -> core_pattern . [ RBRACKET End ]
## nsepseq(core_pattern,SEMI) -> core_pattern . SEMI nsepseq(core_pattern,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(core_pattern,SEMI)) -> core_pattern . SEMI seq(__anonymous_0(core_pattern,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of List WILD SEMI With
##
## Ends in an error in state: 317.
##
## nsepseq(core_pattern,SEMI) -> core_pattern SEMI . nsepseq(core_pattern,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(core_pattern,SEMI)) -> core_pattern SEMI . seq(__anonymous_0(core_pattern,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## core_pattern SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of List WILD With
##
## Ends in an error in state: 316.
##
## nsepseq(core_pattern,SEMI) -> core_pattern . [ RBRACKET End ]
## nsepseq(core_pattern,SEMI) -> core_pattern . SEMI nsepseq(core_pattern,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(core_pattern,SEMI)) -> core_pattern . SEMI seq(__anonymous_0(core_pattern,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of List With
##
## Ends in an error in state: 273.
##
## injection(List,core_pattern) -> List . sep_or_term_list(core_pattern,SEMI) End [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
## injection(List,core_pattern) -> List . End [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
## injection(List,core_pattern) -> List . LBRACKET sep_or_term_list(core_pattern,SEMI) RBRACKET [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
## injection(List,core_pattern) -> List . LBRACKET RBRACKET [ SEMI RPAR RBRACKET End CONS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## List
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of VBAR Block
##
## Ends in an error in state: 335.
##
## case(expr) -> Case expr Of option(VBAR) . cases(expr) End [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of option(VBAR)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD ARROW Bytes RBRACKET
##
## Ends in an error in state: 336.
##
## case(expr) -> Case expr Of option(VBAR) cases(expr) . End [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of option(VBAR) cases(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 328, spurious reduction of production case_clause(expr) -> pattern ARROW expr 
## In state 332, spurious reduction of production nsepseq(case_clause(expr),VBAR) -> case_clause(expr) 
## In state 329, spurious reduction of production cases(expr) -> nsepseq(case_clause(expr),VBAR) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD ARROW Bytes Type
##
## Ends in an error in state: 332.
##
## nsepseq(case_clause(expr),VBAR) -> case_clause(expr) . [ RBRACKET End ]
## nsepseq(case_clause(expr),VBAR) -> case_clause(expr) . VBAR nsepseq(case_clause(expr),VBAR) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## case_clause(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 328, spurious reduction of production case_clause(expr) -> pattern ARROW expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD ARROW Bytes VBAR With
##
## Ends in an error in state: 333.
##
## nsepseq(case_clause(expr),VBAR) -> case_clause(expr) VBAR . nsepseq(case_clause(expr),VBAR) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## case_clause(expr) VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD ARROW With
##
## Ends in an error in state: 327.
##
## case_clause(expr) -> pattern ARROW . expr [ VBAR RBRACKET End ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD CONS WILD CONS With
##
## Ends in an error in state: 306.
##
## nsepseq(core_pattern,CONS) -> core_pattern CONS . nsepseq(core_pattern,CONS) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## core_pattern CONS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD CONS WILD With
##
## Ends in an error in state: 305.
##
## nsepseq(core_pattern,CONS) -> core_pattern . [ RPAR ARROW ]
## nsepseq(core_pattern,CONS) -> core_pattern . CONS nsepseq(core_pattern,CONS) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD CONS With
##
## Ends in an error in state: 303.
##
## pattern -> core_pattern CONS . nsepseq(core_pattern,CONS) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## core_pattern CONS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD RPAR
##
## Ends in an error in state: 326.
##
## case_clause(expr) -> pattern . ARROW expr [ VBAR RBRACKET End ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 302, spurious reduction of production pattern -> core_pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of WILD With
##
## Ends in an error in state: 302.
##
## pattern -> core_pattern . [ RPAR ARROW ]
## pattern -> core_pattern . CONS nsepseq(core_pattern,CONS) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim Of With
##
## Ends in an error in state: 264.
##
## case(expr) -> Case expr Of . option(VBAR) cases(expr) End [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
## case(expr) -> Case expr Of . LBRACKET option(VBAR) cases(expr) RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr Of
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case Verbatim VBAR
##
## Ends in an error in state: 263.
##
## case(expr) -> Case expr . Of option(VBAR) cases(expr) End [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
## case(expr) -> Case expr . Of LBRACKET option(VBAR) cases(expr) RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## Case expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Case With
##
## Ends in an error in state: 137.
##
## case(expr) -> Case . expr Of option(VBAR) cases(expr) End [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
## case(expr) -> Case . expr Of LBRACKET option(VBAR) cases(expr) RBRACKET [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## Case
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Constr DOT And With
##
## Ends in an error in state: 178.
##
## core_expr -> module_field . [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## fun_call -> module_field . arguments [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## module_field
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Constr DOT Ident DOT With
##
## Ends in an error in state: 126.
##
## projection -> Constr DOT Ident DOT . nsepseq(selection,DOT) [ With VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE LBRACKET GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ASS ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT Ident DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Constr DOT Ident With
##
## Ends in an error in state: 125.
##
## module_fun -> Ident . [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## projection -> Constr DOT Ident . DOT nsepseq(selection,DOT) [ With VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE LBRACKET GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ASS ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Constr DOT With
##
## Ends in an error in state: 121.
##
## module_field -> Constr DOT . module_fun [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## projection -> Constr DOT . Ident DOT nsepseq(selection,DOT) [ With VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE LBRACKET GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ASS ARROW ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Constr With
##
## Ends in an error in state: 120.
##
## core_expr -> Constr . arguments [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## core_expr -> Constr . [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## module_field -> Constr . DOT module_fun [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## projection -> Constr . DOT Ident DOT nsepseq(selection,DOT) [ With VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE LBRACKET GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Const Ident COLON Ident RPAR COLON String Is With
##
## Ends in an error in state: 118.
##
## fun_expr -> Function parameters COLON type_expr Is . expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## Function parameters COLON type_expr Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Const Ident COLON Ident RPAR COLON String VBAR
##
## Ends in an error in state: 117.
##
## fun_expr -> Function parameters COLON type_expr . Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## Function parameters COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 44, spurious reduction of production type_expr -> fun_type 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Const Ident COLON Ident RPAR COLON With
##
## Ends in an error in state: 116.
##
## fun_expr -> Function parameters COLON . type_expr Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## Function parameters COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Const Ident COLON Ident RPAR With
##
## Ends in an error in state: 115.
##
## fun_expr -> Function parameters . COLON type_expr Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## Function parameters
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Const Ident COLON With
##
## Ends in an error in state: 79.
##
## param_decl -> Const Ident COLON . param_type [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Const Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Const Ident With
##
## Ends in an error in state: 78.
##
## param_decl -> Const Ident . COLON param_type [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Const Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Const With
##
## Ends in an error in state: 77.
##
## param_decl -> Const . Ident COLON param_type [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Const
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Var Ident COLON Ident SEMI With
##
## Ends in an error in state: 82.
##
## nsepseq(param_decl,SEMI) -> param_decl SEMI . nsepseq(param_decl,SEMI) [ RPAR ]
##
## The known suffix of the stack is as follows:
## param_decl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Var Ident COLON Ident VBAR
##
## Ends in an error in state: 81.
##
## nsepseq(param_decl,SEMI) -> param_decl . [ RPAR ]
## nsepseq(param_decl,SEMI) -> param_decl . SEMI nsepseq(param_decl,SEMI) [ RPAR ]
##
## The known suffix of the stack is as follows:
## param_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production core_type -> Ident 
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 76, spurious reduction of production param_type -> fun_type 
## In state 75, spurious reduction of production param_decl -> Var Ident COLON param_type 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Var Ident With
##
## Ends in an error in state: 73.
##
## param_decl -> Var Ident . COLON param_type [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Var Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR Var With
##
## Ends in an error in state: 72.
##
## param_decl -> Var . Ident COLON param_type [ SEMI RPAR ]
##
## The known suffix of the stack is as follows:
## Var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR With
##
## Ends in an error in state: 71.
##
## par(nsepseq(param_decl,SEMI)) -> LPAR . nsepseq(param_decl,SEMI) RPAR [ COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function With
##
## Ends in an error in state: 114.
##
## fun_expr -> Function . parameters COLON type_expr Is expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## Function
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT Ident ASS
##
## Ends in an error in state: 153.
##
## fun_call_or_par_or_projection -> projection . option(arguments) [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## path -> projection . [ With LBRACKET ]
##
## The known suffix of the stack is as follows:
## projection
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 129, spurious reduction of production nsepseq(selection,DOT) -> selection 
## In state 162, spurious reduction of production projection -> Ident DOT nsepseq(selection,DOT) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT Int DOT With
##
## Ends in an error in state: 130.
##
## nsepseq(selection,DOT) -> selection DOT . nsepseq(selection,DOT) [ With VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE LBRACKET GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ASS ARROW ]
##
## The known suffix of the stack is as follows:
## selection DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT Int While
##
## Ends in an error in state: 129.
##
## nsepseq(selection,DOT) -> selection . [ With VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE LBRACKET GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ASS ARROW ]
## nsepseq(selection,DOT) -> selection . DOT nsepseq(selection,DOT) [ With VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE LBRACKET GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ASS ARROW ]
##
## The known suffix of the stack is as follows:
## selection
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT With
##
## Ends in an error in state: 161.
##
## projection -> Ident DOT . nsepseq(selection,DOT) [ With VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE LBRACKET GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ASS ARROW ]
##
## The known suffix of the stack is as follows:
## Ident DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET Verbatim VBAR
##
## Ends in an error in state: 245.
##
## brackets(expr) -> LBRACKET expr . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ASS ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET With
##
## Ends in an error in state: 244.
##
## brackets(expr) -> LBRACKET . expr RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ASS ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LPAR Verbatim COMMA With
##
## Ends in an error in state: 343.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LPAR Verbatim VBAR
##
## Ends in an error in state: 342.
##
## nsepseq(expr,COMMA) -> expr . [ RPAR ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LPAR With
##
## Ends in an error in state: 113.
##
## par(nsepseq(expr,COMMA)) -> LPAR . nsepseq(expr,COMMA) RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident While
##
## Ends in an error in state: 112.
##
## core_expr -> Ident . [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## fun_call -> Ident . arguments [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## path -> Ident . [ With LBRACKET ]
## projection -> Ident . DOT nsepseq(selection,DOT) [ With VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE LBRACKET GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Constr DOT Ident With
##
## Ends in an error in state: 165.
##
## projection -> Constr DOT Ident . DOT nsepseq(selection,DOT) [ With VBAR SEMI RBRACKET RBRACE End Else EQ ]
##
## The known suffix of the stack is as follows:
## Constr DOT Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Constr DOT With
##
## Ends in an error in state: 164.
##
## projection -> Constr DOT . Ident DOT nsepseq(selection,DOT) [ With VBAR SEMI RBRACKET RBRACE End Else EQ ]
##
## The known suffix of the stack is as follows:
## Constr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Constr With
##
## Ends in an error in state: 163.
##
## projection -> Constr . DOT Ident DOT nsepseq(selection,DOT) [ With VBAR SEMI RBRACKET RBRACE End Else EQ ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Ident EQ Bytes RBRACKET
##
## Ends in an error in state: 241.
##
## ne_injection(Record,field_path_assignment) -> Record sep_or_term_list(field_path_assignment,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Record sep_or_term_list(field_path_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 196, spurious reduction of production field_path_assignment -> path EQ expr 
## In state 234, spurious reduction of production nsepseq(field_path_assignment,SEMI) -> field_path_assignment 
## In state 233, spurious reduction of production sep_or_term_list(field_path_assignment,SEMI) -> nsepseq(field_path_assignment,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Ident EQ Bytes SEMI Ident EQ Bytes SEMI With
##
## Ends in an error in state: 239.
##
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment SEMI . nsepseq(field_path_assignment,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(field_path_assignment,SEMI)) -> field_path_assignment SEMI . seq(__anonymous_0(field_path_assignment,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## field_path_assignment SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Ident EQ Bytes SEMI Ident EQ Bytes VBAR
##
## Ends in an error in state: 238.
##
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment . [ RBRACKET End ]
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment . SEMI nsepseq(field_path_assignment,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(field_path_assignment,SEMI)) -> field_path_assignment . SEMI seq(__anonymous_0(field_path_assignment,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 196, spurious reduction of production field_path_assignment -> path EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Ident EQ Bytes SEMI With
##
## Ends in an error in state: 235.
##
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment SEMI . nsepseq(field_path_assignment,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(field_path_assignment,SEMI)) -> field_path_assignment SEMI . seq(__anonymous_0(field_path_assignment,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## field_path_assignment SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Ident EQ Bytes VBAR
##
## Ends in an error in state: 234.
##
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment . [ RBRACKET End ]
## nsepseq(field_path_assignment,SEMI) -> field_path_assignment . SEMI nsepseq(field_path_assignment,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(field_path_assignment,SEMI)) -> field_path_assignment . SEMI seq(__anonymous_0(field_path_assignment,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 196, spurious reduction of production field_path_assignment -> path EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Ident EQ With
##
## Ends in an error in state: 170.
##
## field_path_assignment -> path EQ . expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## path EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Ident While
##
## Ends in an error in state: 160.
##
## path -> Ident . [ With VBAR SEMI RBRACKET RBRACE End Else EQ ]
## projection -> Ident . DOT nsepseq(selection,DOT) [ With VBAR SEMI RBRACKET RBRACE End Else EQ ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record Ident With
##
## Ends in an error in state: 169.
##
## field_path_assignment -> path . EQ expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production path -> Ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record LBRACKET Ident EQ Bytes End
##
## Ends in an error in state: 166.
##
## ne_injection(Record,field_path_assignment) -> Record LBRACKET sep_or_term_list(field_path_assignment,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET sep_or_term_list(field_path_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 196, spurious reduction of production field_path_assignment -> path EQ expr 
## In state 234, spurious reduction of production nsepseq(field_path_assignment,SEMI) -> field_path_assignment 
## In state 233, spurious reduction of production sep_or_term_list(field_path_assignment,SEMI) -> nsepseq(field_path_assignment,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record LBRACKET With
##
## Ends in an error in state: 159.
##
## ne_injection(Record,field_path_assignment) -> Record LBRACKET . sep_or_term_list(field_path_assignment,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With Record With
##
## Ends in an error in state: 158.
##
## ne_injection(Record,field_path_assignment) -> Record . sep_or_term_list(field_path_assignment,SEMI) End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## ne_injection(Record,field_path_assignment) -> Record . LBRACKET sep_or_term_list(field_path_assignment,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Record
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident With With
##
## Ends in an error in state: 157.
##
## update_record -> path With . ne_injection(Record,field_path_assignment) [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## path With
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If Verbatim Then Verbatim Else With
##
## Ends in an error in state: 350.
##
## cond_expr -> If expr Then expr option(SEMI) Else . expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## If expr Then expr option(SEMI) Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If Verbatim Then Verbatim SEMI EQ
##
## Ends in an error in state: 349.
##
## cond_expr -> If expr Then expr option(SEMI) . Else expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## If expr Then expr option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If Verbatim Then Verbatim VBAR
##
## Ends in an error in state: 348.
##
## cond_expr -> If expr Then expr . option(SEMI) Else expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## If expr Then expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If Verbatim Then With
##
## Ends in an error in state: 347.
##
## cond_expr -> If expr Then . expr option(SEMI) Else expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## If expr Then
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If Verbatim VBAR
##
## Ends in an error in state: 346.
##
## cond_expr -> If expr . Then expr option(SEMI) Else expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If With
##
## Ends in an error in state: 111.
##
## cond_expr -> If . expr Then expr option(SEMI) Else expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET PERCENT Constr Verbatim VBAR
##
## Ends in an error in state: 352.
##
## code_insert_expr -> LBRACKET PERCENT Constr expr . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET PERCENT Constr expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET PERCENT Constr With
##
## Ends in an error in state: 109.
##
## code_insert_expr -> LBRACKET PERCENT Constr . expr RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET PERCENT Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET PERCENT With
##
## Ends in an error in state: 108.
##
## code_insert_expr -> LBRACKET PERCENT . Constr expr RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET With
##
## Ends in an error in state: 107.
##
## code_insert_expr -> LBRACKET . PERCENT Constr expr RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Bytes RPAR With
##
## Ends in an error in state: 172.
##
## fun_call_or_par_or_projection -> par(expr) . option(arguments) [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## par(expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR If Verbatim Then Bytes Else Bytes VBAR
##
## Ends in an error in state: 356.
##
## par(expr) -> LPAR expr . RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## tuple_comp -> expr . COMMA nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 351, spurious reduction of production cond_expr -> If expr Then expr option(SEMI) Else expr 
## In state 230, spurious reduction of production expr -> cond_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim COLON Ident VBAR
##
## Ends in an error in state: 363.
##
## par(annot_expr) -> LPAR annot_expr . RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR annot_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production core_type -> Ident 
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 44, spurious reduction of production type_expr -> fun_type 
## In state 362, spurious reduction of production annot_expr -> disj_expr COLON type_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim COLON With
##
## Ends in an error in state: 361.
##
## annot_expr -> disj_expr COLON . type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## disj_expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim COMMA With
##
## Ends in an error in state: 358.
##
## tuple_comp -> expr COMMA . nsepseq(expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim VBAR
##
## Ends in an error in state: 360.
##
## annot_expr -> disj_expr . COLON type_expr [ RPAR ]
## disj_expr -> disj_expr . Or conj_expr [ RPAR Or COMMA COLON ]
## expr -> disj_expr . [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## disj_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR With
##
## Ends in an error in state: 106.
##
## par(annot_expr) -> LPAR . annot_expr RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## par(expr) -> LPAR . expr RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LPAR LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## par(tuple_comp) -> LPAR . tuple_comp RPAR [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: List LBRACKET Verbatim End
##
## Ends in an error in state: 367.
##
## injection(List,expr) -> List LBRACKET sep_or_term_list(expr,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## List LBRACKET sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 371, spurious reduction of production nsepseq(expr,SEMI) -> expr 
## In state 370, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: List LBRACKET With
##
## Ends in an error in state: 365.
##
## code_insert_expr -> LBRACKET . PERCENT Constr expr RBRACKET [ TIMES SLASH SEMI PLUS Or NE Mod MINUS LT LE GT GE End EQ Contains CONS CAT And ]
## injection(List,expr) -> List LBRACKET . sep_or_term_list(expr,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(List,expr) -> List LBRACKET . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## List LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: List Verbatim RBRACKET
##
## Ends in an error in state: 379.
##
## injection(List,expr) -> List sep_or_term_list(expr,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## List sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 371, spurious reduction of production nsepseq(expr,SEMI) -> expr 
## In state 370, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: List With
##
## Ends in an error in state: 105.
##
## injection(List,expr) -> List . sep_or_term_list(expr,SEMI) End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(List,expr) -> List . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(List,expr) -> List . LBRACKET sep_or_term_list(expr,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(List,expr) -> List . LBRACKET RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## List
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: MINUS With
##
## Ends in an error in state: 104.
##
## unary_expr -> MINUS . core_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map LBRACKET Verbatim ARROW Bytes End
##
## Ends in an error in state: 384.
##
## injection(Map,binding) -> Map LBRACKET sep_or_term_list(binding,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Map LBRACKET sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 252, spurious reduction of production binding -> expr ARROW expr 
## In state 253, spurious reduction of production nsepseq(binding,SEMI) -> binding 
## In state 249, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map LBRACKET With
##
## Ends in an error in state: 382.
##
## code_insert_expr -> LBRACKET . PERCENT Constr expr RBRACKET [ TIMES SLASH PLUS Or NE Mod MINUS LT LE GT GE EQ Contains CONS CAT And ARROW ]
## injection(Map,binding) -> Map LBRACKET . sep_or_term_list(binding,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(Map,binding) -> Map LBRACKET . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Map LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map Verbatim ARROW Bytes RBRACKET
##
## Ends in an error in state: 387.
##
## injection(Map,binding) -> Map sep_or_term_list(binding,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Map sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 252, spurious reduction of production binding -> expr ARROW expr 
## In state 253, spurious reduction of production nsepseq(binding,SEMI) -> binding 
## In state 249, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map Verbatim ARROW Bytes SEMI Verbatim ARROW Bytes SEMI With
##
## Ends in an error in state: 258.
##
## nsepseq(binding,SEMI) -> binding SEMI . nsepseq(binding,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(binding,SEMI)) -> binding SEMI . seq(__anonymous_0(binding,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map Verbatim ARROW Bytes SEMI Verbatim ARROW Bytes VBAR
##
## Ends in an error in state: 257.
##
## nsepseq(binding,SEMI) -> binding . [ RBRACKET End ]
## nsepseq(binding,SEMI) -> binding . SEMI nsepseq(binding,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(binding,SEMI)) -> binding . SEMI seq(__anonymous_0(binding,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 252, spurious reduction of production binding -> expr ARROW expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map Verbatim ARROW Bytes SEMI With
##
## Ends in an error in state: 254.
##
## nsepseq(binding,SEMI) -> binding SEMI . nsepseq(binding,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(binding,SEMI)) -> binding SEMI . seq(__anonymous_0(binding,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map Verbatim ARROW Bytes VBAR
##
## Ends in an error in state: 253.
##
## nsepseq(binding,SEMI) -> binding . [ RBRACKET End ]
## nsepseq(binding,SEMI) -> binding . SEMI nsepseq(binding,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(binding,SEMI)) -> binding . SEMI seq(__anonymous_0(binding,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 252, spurious reduction of production binding -> expr ARROW expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map Verbatim ARROW With
##
## Ends in an error in state: 251.
##
## binding -> expr ARROW . expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## expr ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map Verbatim VBAR
##
## Ends in an error in state: 250.
##
## binding -> expr . ARROW expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Map With
##
## Ends in an error in state: 103.
##
## injection(Map,binding) -> Map . sep_or_term_list(binding,SEMI) End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(Map,binding) -> Map . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(Map,binding) -> Map . LBRACKET sep_or_term_list(binding,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(Map,binding) -> Map . LBRACKET RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Map
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Not Bytes With
##
## Ends in an error in state: 175.
##
## add_expr -> mult_expr . [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## mult_expr -> mult_expr . TIMES unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## mult_expr -> mult_expr . SLASH unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## mult_expr -> mult_expr . Mod unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Not With
##
## Ends in an error in state: 99.
##
## unary_expr -> Not . core_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Not
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record Ident EQ Bytes RBRACKET
##
## Ends in an error in state: 402.
##
## record_expr -> Record sep_or_term_list(field_assignment,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Record sep_or_term_list(field_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 390, spurious reduction of production field_assignment -> Ident EQ expr 
## In state 395, spurious reduction of production nsepseq(field_assignment,SEMI) -> field_assignment 
## In state 394, spurious reduction of production sep_or_term_list(field_assignment,SEMI) -> nsepseq(field_assignment,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record Ident EQ Bytes SEMI Ident EQ Bytes SEMI With
##
## Ends in an error in state: 400.
##
## nsepseq(field_assignment,SEMI) -> field_assignment SEMI . nsepseq(field_assignment,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(field_assignment,SEMI)) -> field_assignment SEMI . seq(__anonymous_0(field_assignment,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## field_assignment SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record Ident EQ Bytes SEMI Ident EQ Bytes VBAR
##
## Ends in an error in state: 399.
##
## nsepseq(field_assignment,SEMI) -> field_assignment . [ RBRACKET End ]
## nsepseq(field_assignment,SEMI) -> field_assignment . SEMI nsepseq(field_assignment,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(field_assignment,SEMI)) -> field_assignment . SEMI seq(__anonymous_0(field_assignment,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## field_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 390, spurious reduction of production field_assignment -> Ident EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record Ident EQ Bytes SEMI With
##
## Ends in an error in state: 396.
##
## nsepseq(field_assignment,SEMI) -> field_assignment SEMI . nsepseq(field_assignment,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(field_assignment,SEMI)) -> field_assignment SEMI . seq(__anonymous_0(field_assignment,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## field_assignment SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record Ident EQ Bytes VBAR
##
## Ends in an error in state: 395.
##
## nsepseq(field_assignment,SEMI) -> field_assignment . [ RBRACKET End ]
## nsepseq(field_assignment,SEMI) -> field_assignment . SEMI nsepseq(field_assignment,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(field_assignment,SEMI)) -> field_assignment . SEMI seq(__anonymous_0(field_assignment,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## field_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 390, spurious reduction of production field_assignment -> Ident EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record Ident EQ With
##
## Ends in an error in state: 98.
##
## field_assignment -> Ident EQ . expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## Ident EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record Ident With
##
## Ends in an error in state: 97.
##
## field_assignment -> Ident . EQ expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record LBRACKET Ident EQ Bytes End
##
## Ends in an error in state: 391.
##
## record_expr -> Record LBRACKET sep_or_term_list(field_assignment,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET sep_or_term_list(field_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 390, spurious reduction of production field_assignment -> Ident EQ expr 
## In state 395, spurious reduction of production nsepseq(field_assignment,SEMI) -> field_assignment 
## In state 394, spurious reduction of production sep_or_term_list(field_assignment,SEMI) -> nsepseq(field_assignment,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record LBRACKET With
##
## Ends in an error in state: 96.
##
## record_expr -> Record LBRACKET . sep_or_term_list(field_assignment,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Record With
##
## Ends in an error in state: 95.
##
## record_expr -> Record . sep_or_term_list(field_assignment,SEMI) End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## record_expr -> Record . LBRACKET sep_or_term_list(field_assignment,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Record
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Set LBRACKET Verbatim End
##
## Ends in an error in state: 406.
##
## injection(Set,expr) -> Set LBRACKET sep_or_term_list(expr,SEMI) . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Set LBRACKET sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 371, spurious reduction of production nsepseq(expr,SEMI) -> expr 
## In state 370, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Set LBRACKET With
##
## Ends in an error in state: 404.
##
## code_insert_expr -> LBRACKET . PERCENT Constr expr RBRACKET [ TIMES SLASH SEMI PLUS Or NE Mod MINUS LT LE GT GE End EQ Contains CONS CAT And ]
## injection(Set,expr) -> Set LBRACKET . sep_or_term_list(expr,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(Set,expr) -> Set LBRACKET . RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Set LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Set Verbatim RBRACKET
##
## Ends in an error in state: 409.
##
## injection(Set,expr) -> Set sep_or_term_list(expr,SEMI) . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Set sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 371, spurious reduction of production nsepseq(expr,SEMI) -> expr 
## In state 370, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Set Verbatim SEMI Verbatim SEMI With
##
## Ends in an error in state: 376.
##
## nsepseq(expr,SEMI) -> expr SEMI . nsepseq(expr,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(expr,SEMI)) -> expr SEMI . seq(__anonymous_0(expr,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## expr SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Set Verbatim SEMI Verbatim VBAR
##
## Ends in an error in state: 375.
##
## nsepseq(expr,SEMI) -> expr . [ RBRACKET End ]
## nsepseq(expr,SEMI) -> expr . SEMI nsepseq(expr,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(expr,SEMI)) -> expr . SEMI seq(__anonymous_0(expr,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Set Verbatim SEMI With
##
## Ends in an error in state: 372.
##
## nsepseq(expr,SEMI) -> expr SEMI . nsepseq(expr,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(expr,SEMI)) -> expr SEMI . seq(__anonymous_0(expr,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## expr SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Set Verbatim VBAR
##
## Ends in an error in state: 371.
##
## nsepseq(expr,SEMI) -> expr . [ RBRACKET End ]
## nsepseq(expr,SEMI) -> expr . SEMI nsepseq(expr,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(expr,SEMI)) -> expr . SEMI seq(__anonymous_0(expr,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Set With
##
## Ends in an error in state: 94.
##
## injection(Set,expr) -> Set . sep_or_term_list(expr,SEMI) End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(Set,expr) -> Set . End [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(Set,expr) -> Set . LBRACKET sep_or_term_list(expr,SEMI) RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## injection(Set,expr) -> Set . LBRACKET RBRACKET [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Contains Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## Set
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim And With
##
## Ends in an error in state: 227.
##
## conj_expr -> conj_expr And . set_membership [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of Function From End Else EOF Const COMMA COLON Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## conj_expr And
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim CAT With
##
## Ends in an error in state: 203.
##
## cat_expr -> cons_expr CAT . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## cons_expr CAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim COLON
##
## Ends in an error in state: 197.
##
## disj_expr -> disj_expr . Or conj_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
## expr -> disj_expr . [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Of Function From End Else EOF Const COMMA Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## disj_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim CONS With
##
## Ends in an error in state: 210.
##
## cons_expr -> add_expr CONS . cons_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE LT LE GT GE Function From End Else EQ EOF Const COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr CONS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Contains With
##
## Ends in an error in state: 200.
##
## set_membership -> core_expr Contains . set_membership [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of Function From End Else EOF Const COMMA COLON Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## core_expr Contains
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim EQ With
##
## Ends in an error in state: 223.
##
## comp_expr -> comp_expr EQ . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim GE With
##
## Ends in an error in state: 221.
##
## comp_expr -> comp_expr GE . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim GT With
##
## Ends in an error in state: 219.
##
## comp_expr -> comp_expr GT . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim LE With
##
## Ends in an error in state: 217.
##
## comp_expr -> comp_expr LE . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim LT With
##
## Ends in an error in state: 215.
##
## comp_expr -> comp_expr LT . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim MINUS Verbatim With
##
## Ends in an error in state: 209.
##
## add_expr -> add_expr MINUS mult_expr . [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## mult_expr -> mult_expr . TIMES unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## mult_expr -> mult_expr . SLASH unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## mult_expr -> mult_expr . Mod unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr MINUS mult_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim MINUS With
##
## Ends in an error in state: 208.
##
## add_expr -> add_expr MINUS . mult_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Mod With
##
## Ends in an error in state: 193.
##
## mult_expr -> mult_expr Mod . unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr Mod
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim NE With
##
## Ends in an error in state: 213.
##
## comp_expr -> comp_expr NE . cat_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of NE LT LE GT GE Function From End Else EQ EOF Const COMMA COLON Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## comp_expr NE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Or With
##
## Ends in an error in state: 198.
##
## disj_expr -> disj_expr Or . conj_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of Function From End Else EOF Const COMMA COLON Block Begin Attributes ARROW ]
##
## The known suffix of the stack is as follows:
## disj_expr Or
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim PLUS Verbatim With
##
## Ends in an error in state: 207.
##
## add_expr -> add_expr PLUS mult_expr . [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## mult_expr -> mult_expr . TIMES unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## mult_expr -> mult_expr . SLASH unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
## mult_expr -> mult_expr . Mod unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr PLUS mult_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim PLUS With
##
## Ends in an error in state: 206.
##
## add_expr -> add_expr PLUS . mult_expr [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## add_expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim SLASH With
##
## Ends in an error in state: 191.
##
## mult_expr -> mult_expr SLASH . unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr SLASH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim TIMES With
##
## Ends in an error in state: 176.
##
## mult_expr -> mult_expr TIMES . unary_expr [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## mult_expr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim VBAR
##
## Ends in an error in state: 606.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim With
##
## Ends in an error in state: 199.
##
## set_membership -> core_expr . Contains set_membership [ VBAR Type To Then Step SEMI Recursive RPAR RBRACKET RBRACE Or Of Function From End Else EOF Const COMMA COLON Block Begin Attributes And ARROW ]
## unary_expr -> core_expr . [ VBAR Type To Then TIMES Step SLASH SEMI Recursive RPAR RBRACKET RBRACE PLUS Or Of NE Mod MINUS LT LE GT GE Function From End Else EQ EOF Const CONS COMMA COLON CAT Block Begin Attributes And ARROW ]
##
## The known suffix of the stack is as follows:
## core_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: With
##
## Ends in an error in state: 604.
##
## interactive_expr' -> . interactive_expr [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attributes LBRACKET String End
##
## Ends in an error in state: 550.
##
## ne_injection(Attributes,String) -> Attributes LBRACKET sep_or_term_list(String,SEMI) . RBRACKET [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Attributes LBRACKET sep_or_term_list(String,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 542, spurious reduction of production nsepseq(String,SEMI) -> String 
## In state 553, spurious reduction of production sep_or_term_list(String,SEMI) -> nsepseq(String,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attributes LBRACKET With
##
## Ends in an error in state: 549.
##
## ne_injection(Attributes,String) -> Attributes LBRACKET . sep_or_term_list(String,SEMI) RBRACKET [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Attributes LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attributes String End Attributes String End SEMI With
##
## Ends in an error in state: 599.
##
## seq(declaration) -> declaration . seq(declaration) [ EOF ]
##
## The known suffix of the stack is as follows:
## declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attributes String End SEMI With
##
## Ends in an error in state: 597.
##
## nseq(declaration) -> declaration . seq(declaration) [ EOF ]
##
## The known suffix of the stack is as follows:
## declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attributes String End With
##
## Ends in an error in state: 592.
##
## attr_decl -> open_attr_decl . option(SEMI) [ Type Recursive Function EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## open_attr_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attributes String RBRACKET
##
## Ends in an error in state: 554.
##
## ne_injection(Attributes,String) -> Attributes sep_or_term_list(String,SEMI) . End [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Attributes sep_or_term_list(String,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 542, spurious reduction of production nsepseq(String,SEMI) -> String 
## In state 553, spurious reduction of production sep_or_term_list(String,SEMI) -> nsepseq(String,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attributes String SEMI String SEMI With
##
## Ends in an error in state: 545.
##
## nsepseq(String,SEMI) -> String SEMI . nsepseq(String,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(String,SEMI)) -> String SEMI . seq(__anonymous_0(String,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## String SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attributes String SEMI String With
##
## Ends in an error in state: 544.
##
## nsepseq(String,SEMI) -> String . [ RBRACKET End ]
## nsepseq(String,SEMI) -> String . SEMI nsepseq(String,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(String,SEMI)) -> String . SEMI seq(__anonymous_0(String,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## String
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attributes String SEMI With
##
## Ends in an error in state: 543.
##
## nsepseq(String,SEMI) -> String SEMI . nsepseq(String,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(String,SEMI)) -> String SEMI . seq(__anonymous_0(String,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## String SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attributes String With
##
## Ends in an error in state: 542.
##
## nsepseq(String,SEMI) -> String . [ RBRACKET End ]
## nsepseq(String,SEMI) -> String . SEMI nsepseq(String,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(String,SEMI)) -> String . SEMI seq(__anonymous_0(String,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## String
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attributes With
##
## Ends in an error in state: 541.
##
## ne_injection(Attributes,String) -> Attributes . sep_or_term_list(String,SEMI) End [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
## ne_injection(Attributes,String) -> Attributes . LBRACKET sep_or_term_list(String,SEMI) RBRACKET [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Attributes
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident COLON Ident EQ Bytes VBAR
##
## Ends in an error in state: 590.
##
## const_decl -> open_const_decl . option(SEMI) [ Type Recursive Function EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## open_const_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 498, spurious reduction of production unqualified_decl(EQ) -> Ident COLON type_expr EQ expr 
## In state 499, spurious reduction of production open_const_decl -> Const unqualified_decl(EQ) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident COLON String EQ With
##
## Ends in an error in state: 497.
##
## unqualified_decl(EQ) -> Ident COLON type_expr EQ . expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Ident COLON type_expr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident COLON String VBAR
##
## Ends in an error in state: 496.
##
## unqualified_decl(EQ) -> Ident COLON type_expr . EQ expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Ident COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 44, spurious reduction of production type_expr -> fun_type 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Ident With
##
## Ends in an error in state: 494.
##
## unqualified_decl(EQ) -> Ident . COLON type_expr EQ expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const With
##
## Ends in an error in state: 493.
##
## open_const_decl -> Const . unqualified_decl(EQ) [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Const
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON Ident Is Bytes VBAR
##
## Ends in an error in state: 588.
##
## fun_decl -> open_fun_decl . option(SEMI) [ Type Recursive Function EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## open_fun_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 466, spurious reduction of production open_fun_decl -> Function Ident parameters COLON type_expr Is expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Case Verbatim Of LBRACKET VBAR Block
##
## Ends in an error in state: 504.
##
## case(if_clause) -> Case expr Of LBRACKET option(VBAR) . cases(if_clause) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET option(VBAR)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Case Verbatim Of LBRACKET WILD ARROW Skip End
##
## Ends in an error in state: 533.
##
## case(if_clause) -> Case expr Of LBRACKET option(VBAR) cases(if_clause) . RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET option(VBAR) cases(if_clause)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 535, spurious reduction of production nsepseq(case_clause(if_clause),VBAR) -> case_clause(if_clause) 
## In state 532, spurious reduction of production cases(if_clause) -> nsepseq(case_clause(if_clause),VBAR) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Case Verbatim Of LBRACKET With
##
## Ends in an error in state: 503.
##
## case(if_clause) -> Case expr Of LBRACKET . option(VBAR) cases(if_clause) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Case Verbatim Of VBAR Block
##
## Ends in an error in state: 538.
##
## case(if_clause) -> Case expr Of option(VBAR) . cases(if_clause) End [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of option(VBAR)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Case Verbatim Of WILD ARROW Skip RBRACKET
##
## Ends in an error in state: 539.
##
## case(if_clause) -> Case expr Of option(VBAR) cases(if_clause) . End [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of option(VBAR) cases(if_clause)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 535, spurious reduction of production nsepseq(case_clause(if_clause),VBAR) -> case_clause(if_clause) 
## In state 532, spurious reduction of production cases(if_clause) -> nsepseq(case_clause(if_clause),VBAR) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Case Verbatim Of WILD ARROW Skip VBAR With
##
## Ends in an error in state: 536.
##
## nsepseq(case_clause(if_clause),VBAR) -> case_clause(if_clause) VBAR . nsepseq(case_clause(if_clause),VBAR) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## case_clause(if_clause) VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Case Verbatim Of WILD ARROW Skip With
##
## Ends in an error in state: 535.
##
## nsepseq(case_clause(if_clause),VBAR) -> case_clause(if_clause) . [ RBRACKET End ]
## nsepseq(case_clause(if_clause),VBAR) -> case_clause(if_clause) . VBAR nsepseq(case_clause(if_clause),VBAR) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## case_clause(if_clause)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Case Verbatim Of WILD ARROW With
##
## Ends in an error in state: 506.
##
## case_clause(if_clause) -> pattern ARROW . if_clause [ VBAR RBRACKET End ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Case Verbatim Of WILD RPAR
##
## Ends in an error in state: 505.
##
## case_clause(if_clause) -> pattern . ARROW if_clause [ VBAR RBRACKET End ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 302, spurious reduction of production pattern -> core_pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Case Verbatim Of With
##
## Ends in an error in state: 502.
##
## case(if_clause) -> Case expr Of . option(VBAR) cases(if_clause) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## case(if_clause) -> Case expr Of . LBRACKET option(VBAR) cases(if_clause) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr Of
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Case Verbatim VBAR
##
## Ends in an error in state: 501.
##
## case(if_clause) -> Case expr . Of option(VBAR) cases(if_clause) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## case(if_clause) -> Case expr . Of LBRACKET option(VBAR) cases(if_clause) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Case With
##
## Ends in an error in state: 500.
##
## case(if_clause) -> Case . expr Of option(VBAR) cases(if_clause) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## case(if_clause) -> Case . expr Of LBRACKET option(VBAR) cases(if_clause) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Case
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Constr DOT And With
##
## Ends in an error in state: 513.
##
## fun_call -> module_field . arguments [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## module_field
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Constr With
##
## Ends in an error in state: 492.
##
## module_field -> Constr . DOT module_fun [ LPAR ]
## projection -> Constr . DOT Ident DOT nsepseq(selection,DOT) [ LBRACKET ASS ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin For Ident ARROW Ident With
##
## Ends in an error in state: 476.
##
## for_loop -> For Ident option(arrow_clause) . In collection expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident option(arrow_clause)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin For Ident ARROW With
##
## Ends in an error in state: 474.
##
## arrow_clause -> ARROW . Ident [ In ]
##
## The known suffix of the stack is as follows:
## ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin For Ident ASS Bytes To Verbatim Step Verbatim VBAR
##
## Ends in an error in state: 489.
##
## for_loop -> For var_assign To expr Step expr . block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For var_assign To expr Step expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin For Ident ASS Bytes To Verbatim Step With
##
## Ends in an error in state: 488.
##
## for_loop -> For var_assign To expr Step . expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For var_assign To expr Step
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin For Ident ASS Bytes To Verbatim VBAR
##
## Ends in an error in state: 487.
##
## for_loop -> For var_assign To expr . block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For var_assign To expr . Step expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For var_assign To expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin For Ident ASS Bytes To With
##
## Ends in an error in state: 486.
##
## for_loop -> For var_assign To . expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For var_assign To . expr Step expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For var_assign To
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin For Ident ASS Bytes VBAR
##
## Ends in an error in state: 485.
##
## for_loop -> For var_assign . To expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For var_assign . To expr Step expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For var_assign
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 473, spurious reduction of production var_assign -> Ident ASS expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin For Ident ASS With
##
## Ends in an error in state: 472.
##
## var_assign -> Ident ASS . expr [ To ]
##
## The known suffix of the stack is as follows:
## Ident ASS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin For Ident In Set Verbatim VBAR
##
## Ends in an error in state: 482.
##
## for_loop -> For Ident option(arrow_clause) In collection expr . block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident option(arrow_clause) In collection expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin For Ident In Set With
##
## Ends in an error in state: 481.
##
## for_loop -> For Ident option(arrow_clause) In collection . expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident option(arrow_clause) In collection
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin For Ident In With
##
## Ends in an error in state: 477.
##
## for_loop -> For Ident option(arrow_clause) In . collection expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For Ident option(arrow_clause) In
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin For Ident With
##
## Ends in an error in state: 471.
##
## for_loop -> For Ident . option(arrow_clause) In collection expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## var_assign -> Ident . ASS expr [ To ]
##
## The known suffix of the stack is as follows:
## For Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin For With
##
## Ends in an error in state: 470.
##
## for_loop -> For . var_assign To expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For . var_assign To expr Step expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
## for_loop -> For . Ident option(arrow_clause) In collection expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## For
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Ident ASS With
##
## Ends in an error in state: 519.
##
## assignment -> lhs ASS . rhs [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## lhs ASS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Ident DOT Ident With
##
## Ends in an error in state: 512.
##
## lhs -> path . [ ASS ]
## map_lookup -> path . brackets(expr) [ ASS ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 129, spurious reduction of production nsepseq(selection,DOT) -> selection 
## In state 162, spurious reduction of production projection -> Ident DOT nsepseq(selection,DOT) 
## In state 168, spurious reduction of production path -> projection 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Ident LBRACKET Bytes RBRACKET With
##
## Ends in an error in state: 518.
##
## assignment -> lhs . ASS rhs [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## lhs
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Ident With
##
## Ends in an error in state: 459.
##
## fun_call -> Ident . arguments [ VBAR SEMI RBRACKET RBRACE End Else ]
## path -> Ident . [ LBRACKET ASS ]
## projection -> Ident . DOT nsepseq(selection,DOT) [ LBRACKET ASS ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin If Verbatim Then LBRACE Skip End
##
## Ends in an error in state: 570.
##
## clause_block -> LBRACE sep_or_term_list(statement,SEMI) . RBRACE [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## LBRACE sep_or_term_list(statement,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 556, spurious reduction of production nsepseq(statement,SEMI) -> statement 
## In state 573, spurious reduction of production sep_or_term_list(statement,SEMI) -> nsepseq(statement,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin If Verbatim Then LBRACE With
##
## Ends in an error in state: 458.
##
## clause_block -> LBRACE . sep_or_term_list(statement,SEMI) RBRACE [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin If Verbatim Then Skip Else With
##
## Ends in an error in state: 576.
##
## conditional -> If expr Then if_clause option(SEMI) Else . if_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If expr Then if_clause option(SEMI) Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin If Verbatim Then Skip SEMI EQ
##
## Ends in an error in state: 575.
##
## conditional -> If expr Then if_clause option(SEMI) . Else if_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If expr Then if_clause option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin If Verbatim Then Skip With
##
## Ends in an error in state: 574.
##
## conditional -> If expr Then if_clause . option(SEMI) Else if_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If expr Then if_clause
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin If Verbatim Then With
##
## Ends in an error in state: 457.
##
## conditional -> If expr Then . if_clause option(SEMI) Else if_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If expr Then
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin If Verbatim VBAR
##
## Ends in an error in state: 456.
##
## conditional -> If expr . Then if_clause option(SEMI) Else if_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin If With
##
## Ends in an error in state: 455.
##
## conditional -> If . expr Then if_clause option(SEMI) Else if_clause [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident VBAR
##
## Ends in an error in state: 432.
##
## map_patch -> Patch path . With ne_injection(Map,binding) [ VBAR SEMI RBRACKET RBRACE End Else ]
## record_patch -> Patch path . With ne_injection(Record,field_assignment) [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_patch -> Patch path . With ne_injection(Set,expr) [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Patch path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production path -> Ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident With Map LBRACKET Verbatim ARROW Bytes End
##
## Ends in an error in state: 448.
##
## ne_injection(Map,binding) -> Map LBRACKET sep_or_term_list(binding,SEMI) . RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Map LBRACKET sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 252, spurious reduction of production binding -> expr ARROW expr 
## In state 253, spurious reduction of production nsepseq(binding,SEMI) -> binding 
## In state 249, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident With Map LBRACKET With
##
## Ends in an error in state: 447.
##
## code_insert_expr -> LBRACKET . PERCENT Constr expr RBRACKET [ TIMES SLASH PLUS Or NE Mod MINUS LT LE GT GE EQ Contains CONS CAT And ARROW ]
## ne_injection(Map,binding) -> Map LBRACKET . sep_or_term_list(binding,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Map LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident With Map Verbatim ARROW Bytes RBRACKET
##
## Ends in an error in state: 450.
##
## ne_injection(Map,binding) -> Map sep_or_term_list(binding,SEMI) . End [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Map sep_or_term_list(binding,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 252, spurious reduction of production binding -> expr ARROW expr 
## In state 253, spurious reduction of production nsepseq(binding,SEMI) -> binding 
## In state 249, spurious reduction of production sep_or_term_list(binding,SEMI) -> nsepseq(binding,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident With Map With
##
## Ends in an error in state: 446.
##
## ne_injection(Map,binding) -> Map . sep_or_term_list(binding,SEMI) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## ne_injection(Map,binding) -> Map . LBRACKET sep_or_term_list(binding,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Map
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident With Record Ident EQ Bytes RBRACKET
##
## Ends in an error in state: 444.
##
## ne_injection(Record,field_assignment) -> Record sep_or_term_list(field_assignment,SEMI) . End [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Record sep_or_term_list(field_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 390, spurious reduction of production field_assignment -> Ident EQ expr 
## In state 395, spurious reduction of production nsepseq(field_assignment,SEMI) -> field_assignment 
## In state 394, spurious reduction of production sep_or_term_list(field_assignment,SEMI) -> nsepseq(field_assignment,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident With Record LBRACKET Ident EQ Bytes End
##
## Ends in an error in state: 442.
##
## ne_injection(Record,field_assignment) -> Record LBRACKET sep_or_term_list(field_assignment,SEMI) . RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET sep_or_term_list(field_assignment,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 390, spurious reduction of production field_assignment -> Ident EQ expr 
## In state 395, spurious reduction of production nsepseq(field_assignment,SEMI) -> field_assignment 
## In state 394, spurious reduction of production sep_or_term_list(field_assignment,SEMI) -> nsepseq(field_assignment,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident With Record LBRACKET With
##
## Ends in an error in state: 441.
##
## ne_injection(Record,field_assignment) -> Record LBRACKET . sep_or_term_list(field_assignment,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident With Record With
##
## Ends in an error in state: 440.
##
## ne_injection(Record,field_assignment) -> Record . sep_or_term_list(field_assignment,SEMI) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## ne_injection(Record,field_assignment) -> Record . LBRACKET sep_or_term_list(field_assignment,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Record
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident With Set LBRACKET Verbatim End
##
## Ends in an error in state: 436.
##
## ne_injection(Set,expr) -> Set LBRACKET sep_or_term_list(expr,SEMI) . RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Set LBRACKET sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 371, spurious reduction of production nsepseq(expr,SEMI) -> expr 
## In state 370, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident With Set LBRACKET With
##
## Ends in an error in state: 435.
##
## code_insert_expr -> LBRACKET . PERCENT Constr expr RBRACKET [ TIMES SLASH SEMI PLUS Or NE Mod MINUS LT LE GT GE End EQ Contains CONS CAT And ]
## ne_injection(Set,expr) -> Set LBRACKET . sep_or_term_list(expr,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Set LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident With Set Verbatim RBRACKET
##
## Ends in an error in state: 438.
##
## ne_injection(Set,expr) -> Set sep_or_term_list(expr,SEMI) . End [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Set sep_or_term_list(expr,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
## In state 371, spurious reduction of production nsepseq(expr,SEMI) -> expr 
## In state 370, spurious reduction of production sep_or_term_list(expr,SEMI) -> nsepseq(expr,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident With Set With
##
## Ends in an error in state: 434.
##
## ne_injection(Set,expr) -> Set . sep_or_term_list(expr,SEMI) End [ VBAR SEMI RBRACKET RBRACE End Else ]
## ne_injection(Set,expr) -> Set . LBRACKET sep_or_term_list(expr,SEMI) RBRACKET [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Set
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch Ident With With
##
## Ends in an error in state: 433.
##
## map_patch -> Patch path With . ne_injection(Map,binding) [ VBAR SEMI RBRACKET RBRACE End Else ]
## record_patch -> Patch path With . ne_injection(Record,field_assignment) [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_patch -> Patch path With . ne_injection(Set,expr) [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Patch path With
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Patch With
##
## Ends in an error in state: 431.
##
## map_patch -> Patch . path With ne_injection(Map,binding) [ VBAR SEMI RBRACKET RBRACE End Else ]
## record_patch -> Patch . path With ne_injection(Record,field_assignment) [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_patch -> Patch . path With ne_injection(Set,expr) [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Patch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Remove Verbatim From Map With
##
## Ends in an error in state: 429.
##
## map_remove -> Remove expr From Map . path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove expr From Map
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Remove Verbatim From Set With
##
## Ends in an error in state: 427.
##
## set_remove -> Remove expr From Set . path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove expr From Set
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Remove Verbatim From With
##
## Ends in an error in state: 426.
##
## map_remove -> Remove expr From . Map path [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_remove -> Remove expr From . Set path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove expr From
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Remove Verbatim VBAR
##
## Ends in an error in state: 425.
##
## map_remove -> Remove expr . From Map path [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_remove -> Remove expr . From Set path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Remove With
##
## Ends in an error in state: 424.
##
## map_remove -> Remove . expr From Map path [ VBAR SEMI RBRACKET RBRACE End Else ]
## set_remove -> Remove . expr From Set path [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Remove
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Skip End While
##
## Ends in an error in state: 467.
##
## open_fun_decl -> Function Ident parameters COLON type_expr Is block . With expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Function Ident parameters COLON type_expr Is block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Skip End With With
##
## Ends in an error in state: 468.
##
## open_fun_decl -> Function Ident parameters COLON type_expr Is block With . expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Function Ident parameters COLON type_expr Is block With
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Skip RBRACE
##
## Ends in an error in state: 578.
##
## block -> Begin sep_or_term_list(statement,SEMI) . End [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Begin sep_or_term_list(statement,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 556, spurious reduction of production nsepseq(statement,SEMI) -> statement 
## In state 573, spurious reduction of production sep_or_term_list(statement,SEMI) -> nsepseq(statement,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Skip SEMI Skip SEMI With
##
## Ends in an error in state: 559.
##
## nsepseq(statement,SEMI) -> statement SEMI . nsepseq(statement,SEMI) [ RBRACE End ]
## seq(__anonymous_0(statement,SEMI)) -> statement SEMI . seq(__anonymous_0(statement,SEMI)) [ RBRACE End ]
##
## The known suffix of the stack is as follows:
## statement SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Skip SEMI Skip With
##
## Ends in an error in state: 558.
##
## nsepseq(statement,SEMI) -> statement . [ RBRACE End ]
## nsepseq(statement,SEMI) -> statement . SEMI nsepseq(statement,SEMI) [ RBRACE End ]
## seq(__anonymous_0(statement,SEMI)) -> statement . SEMI seq(__anonymous_0(statement,SEMI)) [ RBRACE End ]
##
## The known suffix of the stack is as follows:
## statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Skip SEMI With
##
## Ends in an error in state: 557.
##
## nsepseq(statement,SEMI) -> statement SEMI . nsepseq(statement,SEMI) [ RBRACE End ]
## nseq(__anonymous_0(statement,SEMI)) -> statement SEMI . seq(__anonymous_0(statement,SEMI)) [ RBRACE End ]
##
## The known suffix of the stack is as follows:
## statement SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Skip With
##
## Ends in an error in state: 556.
##
## nsepseq(statement,SEMI) -> statement . [ RBRACE End ]
## nsepseq(statement,SEMI) -> statement . SEMI nsepseq(statement,SEMI) [ RBRACE End ]
## nseq(__anonymous_0(statement,SEMI)) -> statement . SEMI seq(__anonymous_0(statement,SEMI)) [ RBRACE End ]
##
## The known suffix of the stack is as follows:
## statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Var Ident COLON String ASS With
##
## Ends in an error in state: 420.
##
## unqualified_decl(ASS) -> Ident COLON type_expr ASS . expr [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Ident COLON type_expr ASS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Var Ident COLON String VBAR
##
## Ends in an error in state: 419.
##
## unqualified_decl(ASS) -> Ident COLON type_expr . ASS expr [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Ident COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 44, spurious reduction of production type_expr -> fun_type 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Var Ident With
##
## Ends in an error in state: 417.
##
## unqualified_decl(ASS) -> Ident . COLON type_expr ASS expr [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Var With
##
## Ends in an error in state: 416.
##
## open_var_decl -> Var . unqualified_decl(ASS) [ SEMI RBRACE End ]
##
## The known suffix of the stack is as follows:
## Var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin While Verbatim VBAR
##
## Ends in an error in state: 414.
##
## while_loop -> While expr . block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## While expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 199, spurious reduction of production unary_expr -> core_expr 
## In state 146, spurious reduction of production mult_expr -> unary_expr 
## In state 175, spurious reduction of production add_expr -> mult_expr 
## In state 205, spurious reduction of production cons_expr -> add_expr 
## In state 202, spurious reduction of production cat_expr -> cons_expr 
## In state 225, spurious reduction of production comp_expr -> cat_expr 
## In state 212, spurious reduction of production set_membership -> comp_expr 
## In state 148, spurious reduction of production conj_expr -> set_membership 
## In state 229, spurious reduction of production disj_expr -> conj_expr 
## In state 197, spurious reduction of production expr -> disj_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin While With
##
## Ends in an error in state: 413.
##
## while_loop -> While . expr block [ VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## While
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin With
##
## Ends in an error in state: 415.
##
## block -> Begin . sep_or_term_list(statement,SEMI) End [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Begin
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Block LBRACE Skip End
##
## Ends in an error in state: 581.
##
## block -> Block LBRACE sep_or_term_list(statement,SEMI) . RBRACE [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Block LBRACE sep_or_term_list(statement,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 556, spurious reduction of production nsepseq(statement,SEMI) -> statement 
## In state 573, spurious reduction of production sep_or_term_list(statement,SEMI) -> nsepseq(statement,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Block LBRACE With
##
## Ends in an error in state: 412.
##
## block -> Block LBRACE . sep_or_term_list(statement,SEMI) RBRACE [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Block LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Block With
##
## Ends in an error in state: 411.
##
## block -> Block . LBRACE sep_or_term_list(statement,SEMI) RBRACE [ With VBAR SEMI RBRACKET RBRACE End Else ]
##
## The known suffix of the stack is as follows:
## Block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is With
##
## Ends in an error in state: 465.
##
## open_fun_decl -> Function Ident parameters COLON type_expr Is . block With expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
## open_fun_decl -> Function Ident parameters COLON type_expr Is . expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Function Ident parameters COLON type_expr Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR COLON String VBAR
##
## Ends in an error in state: 464.
##
## open_fun_decl -> Function Ident parameters COLON type_expr . Is block With expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
## open_fun_decl -> Function Ident parameters COLON type_expr . Is expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Function Ident parameters COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 44, spurious reduction of production type_expr -> fun_type 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR Const Ident COLON Ident RPAR With
##
## Ends in an error in state: 462.
##
## open_fun_decl -> Function Ident parameters . COLON type_expr Is block With expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
## open_fun_decl -> Function Ident parameters . COLON type_expr Is expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Function Ident parameters
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident With
##
## Ends in an error in state: 461.
##
## open_fun_decl -> Function Ident . parameters COLON type_expr Is block With expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
## open_fun_decl -> Function Ident . parameters COLON type_expr Is expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Function Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function With
##
## Ends in an error in state: 460.
##
## open_fun_decl -> Function . Ident parameters COLON type_expr Is block With expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
## open_fun_decl -> Function . Ident parameters COLON type_expr Is expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Function
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Skip End While
##
## Ends in an error in state: 584.
##
## open_fun_decl -> Recursive Function Ident parameters COLON type_expr Is block . With expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident parameters COLON type_expr Is block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is Begin Skip End With With
##
## Ends in an error in state: 585.
##
## open_fun_decl -> Recursive Function Ident parameters COLON type_expr Is block With . expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident parameters COLON type_expr Is block With
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive Function Ident LPAR Const Ident COLON Ident RPAR COLON String Is With
##
## Ends in an error in state: 89.
##
## open_fun_decl -> Recursive Function Ident parameters COLON type_expr Is . block With expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
## open_fun_decl -> Recursive Function Ident parameters COLON type_expr Is . expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident parameters COLON type_expr Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive Function Ident LPAR Const Ident COLON Ident RPAR COLON String VBAR
##
## Ends in an error in state: 88.
##
## open_fun_decl -> Recursive Function Ident parameters COLON type_expr . Is block With expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
## open_fun_decl -> Recursive Function Ident parameters COLON type_expr . Is expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident parameters COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 44, spurious reduction of production type_expr -> fun_type 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive Function Ident LPAR Const Ident COLON Ident RPAR With
##
## Ends in an error in state: 86.
##
## open_fun_decl -> Recursive Function Ident parameters . COLON type_expr Is block With expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
## open_fun_decl -> Recursive Function Ident parameters . COLON type_expr Is expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident parameters
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive Function Ident With
##
## Ends in an error in state: 70.
##
## open_fun_decl -> Recursive Function Ident . parameters COLON type_expr Is block With expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
## open_fun_decl -> Recursive Function Ident . parameters COLON type_expr Is expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Recursive Function Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive Function With
##
## Ends in an error in state: 69.
##
## open_fun_decl -> Recursive Function . Ident parameters COLON type_expr Is block With expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
## open_fun_decl -> Recursive Function . Ident parameters COLON type_expr Is expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Recursive Function
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Recursive With
##
## Ends in an error in state: 68.
##
## open_fun_decl -> Recursive . Function Ident parameters COLON type_expr Is block With expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
## open_fun_decl -> Recursive . Function Ident parameters COLON type_expr Is expr [ Type SEMI Recursive RBRACE Function End EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Recursive
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is BigMap With
##
## Ends in an error in state: 19.
##
## core_type -> BigMap . type_tuple [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
##
## The known suffix of the stack is as follows:
## BigMap
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Constr Of With
##
## Ends in an error in state: 28.
##
## variant -> Constr Of . fun_type [ VBAR Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ]
##
## The known suffix of the stack is as follows:
## Constr Of
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Constr VBAR With
##
## Ends in an error in state: 40.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Constr With
##
## Ends in an error in state: 27.
##
## variant -> Constr . [ VBAR Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ]
## variant -> Constr . Of fun_type [ VBAR Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ]
##
## The known suffix of the stack is as follows:
## Constr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Ident With
##
## Ends in an error in state: 16.
##
## core_type -> Ident . [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
## core_type -> Ident . type_tuple [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is LPAR String VBAR
##
## Ends in an error in state: 62.
##
## par(type_expr) -> LPAR type_expr . RPAR [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 44, spurious reduction of production type_expr -> fun_type 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is LPAR With
##
## Ends in an error in state: 7.
##
## par(type_expr) -> LPAR . type_expr RPAR [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is List With
##
## Ends in an error in state: 14.
##
## core_type -> List . par(type_expr) [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
##
## The known suffix of the stack is as follows:
## List
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Map LPAR String COMMA With
##
## Ends in an error in state: 22.
##
## nsepseq(type_expr,COMMA) -> type_expr COMMA . nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Map LPAR String VBAR
##
## Ends in an error in state: 21.
##
## nsepseq(type_expr,COMMA) -> type_expr . [ RPAR ]
## nsepseq(type_expr,COMMA) -> type_expr . COMMA nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 44, spurious reduction of production type_expr -> fun_type 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Map LPAR With
##
## Ends in an error in state: 13.
##
## par(nsepseq(type_expr,COMMA)) -> LPAR . nsepseq(type_expr,COMMA) RPAR [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Map With
##
## Ends in an error in state: 12.
##
## core_type -> Map . type_tuple [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
##
## The known suffix of the stack is as follows:
## Map
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record Ident COLON Ident RBRACKET
##
## Ends in an error in state: 60.
##
## record_type -> Record sep_or_term_list(field_decl,SEMI) . End [ Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ]
##
## The known suffix of the stack is as follows:
## Record sep_or_term_list(field_decl,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production core_type -> Ident 
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 44, spurious reduction of production type_expr -> fun_type 
## In state 48, spurious reduction of production field_decl -> Ident COLON type_expr 
## In state 53, spurious reduction of production nsepseq(field_decl,SEMI) -> field_decl 
## In state 52, spurious reduction of production sep_or_term_list(field_decl,SEMI) -> nsepseq(field_decl,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record Ident COLON Ident SEMI Ident COLON Ident SEMI With
##
## Ends in an error in state: 58.
##
## nsepseq(field_decl,SEMI) -> field_decl SEMI . nsepseq(field_decl,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(field_decl,SEMI)) -> field_decl SEMI . seq(__anonymous_0(field_decl,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## field_decl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record Ident COLON Ident SEMI Ident COLON Ident VBAR
##
## Ends in an error in state: 57.
##
## nsepseq(field_decl,SEMI) -> field_decl . [ RBRACKET End ]
## nsepseq(field_decl,SEMI) -> field_decl . SEMI nsepseq(field_decl,SEMI) [ RBRACKET End ]
## seq(__anonymous_0(field_decl,SEMI)) -> field_decl . SEMI seq(__anonymous_0(field_decl,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production core_type -> Ident 
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 44, spurious reduction of production type_expr -> fun_type 
## In state 48, spurious reduction of production field_decl -> Ident COLON type_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record Ident COLON Ident SEMI With
##
## Ends in an error in state: 54.
##
## nsepseq(field_decl,SEMI) -> field_decl SEMI . nsepseq(field_decl,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(field_decl,SEMI)) -> field_decl SEMI . seq(__anonymous_0(field_decl,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## field_decl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record Ident COLON Ident VBAR
##
## Ends in an error in state: 53.
##
## nsepseq(field_decl,SEMI) -> field_decl . [ RBRACKET End ]
## nsepseq(field_decl,SEMI) -> field_decl . SEMI nsepseq(field_decl,SEMI) [ RBRACKET End ]
## nseq(__anonymous_0(field_decl,SEMI)) -> field_decl . SEMI seq(__anonymous_0(field_decl,SEMI)) [ RBRACKET End ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production core_type -> Ident 
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 44, spurious reduction of production type_expr -> fun_type 
## In state 48, spurious reduction of production field_decl -> Ident COLON type_expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record Ident COLON With
##
## Ends in an error in state: 11.
##
## field_decl -> Ident COLON . type_expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record Ident With
##
## Ends in an error in state: 10.
##
## field_decl -> Ident . COLON type_expr [ SEMI RBRACKET End ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record LBRACKET Ident COLON Ident End
##
## Ends in an error in state: 49.
##
## record_type -> Record LBRACKET sep_or_term_list(field_decl,SEMI) . RBRACKET [ Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET sep_or_term_list(field_decl,SEMI)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production core_type -> Ident 
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 44, spurious reduction of production type_expr -> fun_type 
## In state 48, spurious reduction of production field_decl -> Ident COLON type_expr 
## In state 53, spurious reduction of production nsepseq(field_decl,SEMI) -> field_decl 
## In state 52, spurious reduction of production sep_or_term_list(field_decl,SEMI) -> nsepseq(field_decl,SEMI) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record LBRACKET With
##
## Ends in an error in state: 9.
##
## record_type -> Record LBRACKET . sep_or_term_list(field_decl,SEMI) RBRACKET [ Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ]
##
## The known suffix of the stack is as follows:
## Record LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Record With
##
## Ends in an error in state: 8.
##
## record_type -> Record . sep_or_term_list(field_decl,SEMI) End [ Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ]
## record_type -> Record . LBRACKET sep_or_term_list(field_decl,SEMI) RBRACKET [ Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ]
##
## The known suffix of the stack is as follows:
## Record
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is Set With
##
## Ends in an error in state: 6.
##
## core_type -> Set . par(type_expr) [ VBAR Type TIMES SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
##
## The known suffix of the stack is as follows:
## Set
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is String ARROW With
##
## Ends in an error in state: 37.
##
## fun_type -> cartesian ARROW . fun_type [ VBAR Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ]
##
## The known suffix of the stack is as follows:
## cartesian ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is String TIMES String TIMES With
##
## Ends in an error in state: 34.
##
## nsepseq(core_type,TIMES) -> core_type TIMES . nsepseq(core_type,TIMES) [ VBAR Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
##
## The known suffix of the stack is as follows:
## core_type TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is String TIMES String With
##
## Ends in an error in state: 33.
##
## nsepseq(core_type,TIMES) -> core_type . [ VBAR Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
## nsepseq(core_type,TIMES) -> core_type . TIMES nsepseq(core_type,TIMES) [ VBAR Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
##
## The known suffix of the stack is as follows:
## core_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is String TIMES With
##
## Ends in an error in state: 31.
##
## cartesian -> core_type TIMES . nsepseq(core_type,TIMES) [ VBAR Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
##
## The known suffix of the stack is as follows:
## core_type TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is String VBAR
##
## Ends in an error in state: 65.
##
## type_decl -> Type Ident Is type_expr . option(SEMI) [ Type Recursive Function EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Type Ident Is type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 30, spurious reduction of production cartesian -> core_type 
## In state 36, spurious reduction of production fun_type -> cartesian 
## In state 44, spurious reduction of production type_expr -> fun_type 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is String With
##
## Ends in an error in state: 30.
##
## cartesian -> core_type . [ VBAR Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
## cartesian -> core_type . TIMES nsepseq(core_type,TIMES) [ VBAR Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ARROW ]
##
## The known suffix of the stack is as follows:
## core_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is VBAR Const
##
## Ends in an error in state: 26.
##
## sum_type -> option(VBAR) . nsepseq(variant,VBAR) [ Type SEMI Recursive RPAR RBRACKET Is Function End EQ EOF Const COMMA Attributes ASS ]
##
## The known suffix of the stack is as follows:
## option(VBAR)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident Is With
##
## Ends in an error in state: 3.
##
## type_decl -> Type Ident Is . type_expr option(SEMI) [ Type Recursive Function EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Type Ident Is
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident With
##
## Ends in an error in state: 2.
##
## type_decl -> Type Ident . Is type_expr option(SEMI) [ Type Recursive Function EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type With
##
## Ends in an error in state: 1.
##
## type_decl -> Type . Ident Is type_expr option(SEMI) [ Type Recursive Function EOF Const Attributes ]
##
## The known suffix of the stack is as follows:
## Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: With
##
## Ends in an error in state: 0.
##
## contract' -> . contract [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>
